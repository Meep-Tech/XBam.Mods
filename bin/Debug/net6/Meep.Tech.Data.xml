<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Meep.Tech.Data</name>
    </assembly>
    <members>
        <member name="T:Meep.Tech.Data.Archetype">
            <summary>
            A singleton data store and factory.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype.Id">
            <summary>
            The Id of this Archetype.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype.BaseArchetype">
            <summary>
            The Base Archetype this Archetype derives from.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype.ModelBaseType">
            <summary>
            The Base type of model that this archetype family produces.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype.ModelTypeProduced">
            <summary>
            The Base type of model that this archetype family produces.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype.Meep#Tech#Data#IFactory#ModelConstructor">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype.Type">
            <summary>
            The System.Type of this Archetype
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype.IsBaseArchetype">
            <summary>
            If this is an archetype that inherits from Archetype[,] directly.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype.TypeCollection">
            <summary>
            The collection containing this archetype
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype.InitialComponents">
            <summary>
            The initial default components to add to this archetype on it's creation, indexed by their keys. 
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype.ModelLinkedComponents">
            <summary>
            The Archetype components linked to model components
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype.InitialUnlinkedModelComponents">
            <summary>
            Components by key, with optional constructors used to set up the default components on a model made by this Archetype,
            Usually you'll want to use an Archetype.ILinkedComponent but this is here too for model components. not linked to an archetype component.
            If the constructor function is left null, the default component ctor is used.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype.AllowExternalComponentConfiguration">
            <summary>
            If this is true, this Archetype can have it's component collection modified before load by mods and other libraries.
            This does not affect the ability to inherit and override InitialComponents for an archetype.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype.AllowInitializationsAfterLoaderFinalization">
            <summary>
            If this is true, this archetype and children of it can be initialized after the loader has finished.
            Be careful with these, it's up to you to maintain singleton patters.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype.DefaultTestParams">
            <summary>
            Default params for testing
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.Finish">
            <summary>
            Finish setting this up
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.TryToUnload">
            <summary>
            Try to unload this archetype
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.#ctor(Meep.Tech.Data.Archetype.Identity,System.Func{Meep.Tech.Data.Archetype,Meep.Tech.Data.Archetype.Identity})">
            <summary>
            Make a new archetype
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.GetGenericBuilderConstructor">
            <summary>
            helper for getting the builder constructor from the non-generic base class
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.GetHashCode">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.Equals(System.Object)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.ToString">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.Equals(Meep.Tech.Data.Archetype)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.op_Equality(Meep.Tech.Data.Archetype,Meep.Tech.Data.Archetype)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.op_Inequality(Meep.Tech.Data.Archetype,Meep.Tech.Data.Archetype)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.ConfigureModel(Meep.Tech.Data.IBuilder,Meep.Tech.Data.IModel)">
            <summary>
            Function that gets called by default in builders.
            Can be used to add logic during model setup as a shortcut.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.FinalizeModel(Meep.Tech.Data.IBuilder,Meep.Tech.Data.IModel)">
            <summary>
            Function that gets called by default in builders.
            Can be used to add logic during model setup as a shortcut.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.MakeDefault">
            <summary>
            Base make helper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.MakeDefaultWith(Meep.Tech.Data.IBuilder)">
            <summary>
            Base make helper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.MakeDefaultWith(System.Func{Meep.Tech.Data.IBuilder,Meep.Tech.Data.IBuilder})">
            <summary>
            Base make helper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.Make``1">
            <summary>
            Base make helper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.Make``1(Meep.Tech.Data.IBuilder)">
            <summary>
            Base make helper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.Make(Meep.Tech.Data.IBuilder)">
            <summary>
            Base make helper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.Make``1(System.Func{Meep.Tech.Data.IBuilder,Meep.Tech.Data.IBuilder})">
            <summary>
            Base make helper
            </summary>
            <returns></returns>
        </member>
        <member name="P:Meep.Tech.Data.Archetype.Components">
            <summary>
            Publicly readable components
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype.Meep#Tech#Data#IReadableComponentStorage#ComponentsByBuilderKey">
            <summary>
            The accessor for the default Icomponents implimentation
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype.Meep#Tech#Data#IReadableComponentStorage#ComponentsWithWaitingContracts">
            <summary>
            The accessor for the default Icomponents implimentation
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype._components">
            <summary>
            Internally stored components
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.GetComponent(System.String)">
            <summary>
            Get a component if it exists. Throws if it doesn't
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.GetComponent``1(System.String)">
            <summary>
            Get a component if it exists. Throws if it doesn't
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.GetComponent``1">
            <summary>
            Get a component if it exists. Throws if it doesn't
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.TryToGetComponent(System.Type,Meep.Tech.Data.Archetype.IComponent@)">
            <summary>
            Get a component if this has a component of that given type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.HasComponent(System.Type)">
            <summary>
            Check if this has a given component by base type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.HasComponent(System.String)">
            <summary>
            Check if this has a component matching the given object
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.TryToGetComponent(System.String,Meep.Tech.Data.Archetype.IComponent@)">
            <summary>
            Get a component if this has that given component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.HasComponent(Meep.Tech.Data.Archetype.IComponent)">
            <summary>
            Check if this has a component matching the given object
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.TryToGetComponent(Meep.Tech.Data.Archetype.IComponent,Meep.Tech.Data.Archetype.IComponent@)">
            <summary>
            Get a component if this has that given component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.AddComponent(Meep.Tech.Data.Archetype.IComponent)">
            <summary>
            Add a new component, throws if the component key is taken already
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.UpdateComponent(Meep.Tech.Data.Archetype.IComponent)">
            <summary>
            replace an existing component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.UpdateComponent``1(System.Func{``0,``0})">
            <summary>
            update an existing component, given it's current data
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.AddOrUpdateComponent(Meep.Tech.Data.Archetype.IComponent)">
            <summary>
            Add or replace a component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.RemoveComponent(Meep.Tech.Data.Archetype.IComponent)">
            <summary>
            Remove an existing component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.RemoveComponent``1">
            <summary>
            Remove an existing component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.RemoveComponent``1(Meep.Tech.Data.Archetype.IComponent@)">
            <summary>
            Remove an existing component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.RemoveComponent(System.Type)">
            <summary>
            Remove an existing component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.RemoveComponent(System.Type,Meep.Tech.Data.Archetype.IComponent@)">
            <summary>
            Remove an existing component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.RemoveComponent(System.String,Meep.Tech.Data.Archetype.IComponent@)">
            <summary>
            Remove and get an existing component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.DeserializeModelFromJson(Newtonsoft.Json.Linq.JObject,System.Type,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Used to deserialize a jobject by default.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.SerializeModelToJson(Meep.Tech.Data.IModel,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Used to serialize a model with this archetype to a jobject by default
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Archetype.ISplayed">
            <summary>
            The base non-generic interface for ISplayed
            Is used to automatically generate an archetype for every member of a given enumeration.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.ISplayed.GetArchetypeFor``2(Meep.Tech.Data.Enumeration)">
            <summary>
            Get a splayed archetype
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Archetype.ISplayed`2">
            <summary>
            This is a trait that dictates that one of these archetypes should be produced for each item in a given enumeration.
            Types extending this cannot be abstract.
            This will extend to types that inherit from this archetype, inheriting further from this archetype is not suggested.
            If the base archetype is never constructed for a splayed type. The splayed archetypes can be fetched via the System.Type that extends this interface statically. You must call ".FoGetForValuer()" on the correct splayed interface to get a specific sub-archetype specific to one of the enumerations.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype.ISplayed`2.AssociatedEnum">
            <summary>
            the enum associated with this archetype.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.ISplayed`2.ConstructArchetypeFor(`0)">
            <summary>
            This will be called for each enumeration loaded at runtime for the enumeration type.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.ISplayed`2.GetForValue(`0)">
            <summary>
            Get the specific Archetype for an enum value.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Archetype.IComponent">
            <summary>
            A Component for an archetype. Contains data and system logics.
            This is the non-generic base class for utility
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Archetype.IComponent.IAmLinkedTo`1">
            <summary>
            Can be used to link an archetype component to a model component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.IComponent.IAmLinkedTo`1.BuildDefaultModelComponent(Meep.Tech.Data.IModel.Builder,Meep.Tech.Data.Universe)">
            <summary>
            Build and get a default model component that is linked to this archetype component.
            This behavior can be overriden by default if you choose. It could even just be a ctor call.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.IComponent.IAmLinkedTo`1.Meep#Tech#Data#Archetype#IComponent#ILinkedComponent#BuildDefaultModelComponent(Meep.Tech.Data.IModel.Builder,Meep.Tech.Data.Universe)">
            <summary>
            Build and get a default model component that is linked to this archetype component.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Archetype.IComponent.ILinkedComponent">
            <summary>
            Can be used to link an archetype component to a model component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.IComponent.ILinkedComponent.BuildDefaultModelComponent(Meep.Tech.Data.IModel.Builder,Meep.Tech.Data.Universe)">
            <summary>
            Build and get a default model component that is linked to this archetype component.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Archetype.IComponent.IIsRestrictedTo`1">
            <summary>
            Can be used to indicate that this component is restricted to a specific branch of archetypes based on the provided base archetype.
            </summary>
            <seealso cref="T:Meep.Tech.Data.Archetype.IComponent.IIsRestrictedToCertainTypes"/>
            <seealso cref="T:Meep.Tech.Data.Archetype.IComponent.IIsRestrictedTo`1"/>
            <seealso cref="T:Meep.Tech.Data.IModel.IComponent.IIsRestrictedToCertainTypes"/>
            <seealso cref="T:Meep.Tech.Data.IModel.IComponent.IIsRestrictedTo`1"/>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.IComponent.IIsRestrictedTo`1.Meep#Tech#Data#Archetype#IComponent#IIsRestrictedToCertainTypes#IsCompatableWith(Meep.Tech.Data.Archetype)">
            <summary>
            Check if this is compatable with an archetype
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Archetype.IComponent.IIsRestrictedToCertainTypes">
            <summary>
            Can be used to indicate that this component is restricted to a specific branch of archetypes based on the provided base archetype.
            Base functionality. Extend the generic version instead.
            Base Generic Type.
            </summary>
            <seealso cref="T:Meep.Tech.Data.Archetype.IComponent.IIsRestrictedToCertainTypes"/>
            <seealso cref="T:Meep.Tech.Data.Archetype.IComponent.IIsRestrictedTo`1"/>
            <seealso cref="T:Meep.Tech.Data.IModel.IComponent.IIsRestrictedToCertainTypes"/>
            <seealso cref="T:Meep.Tech.Data.IModel.IComponent.IIsRestrictedTo`1"/>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.IComponent.IIsRestrictedToCertainTypes.IsCompatableWith(Meep.Tech.Data.Archetype)">
            <summary>
            Check if this is compatable with an archetype
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Archetype.IComponent`1">
            <summary>
            A Component for an archetype. Contains data and system logics.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Archetype.IComponent`1.IHaveContractWith`1">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Meep.Tech.Data.Archetype.Collection">
            <summary>
            A Collection of Archetypes.
            All archetypes need to be in a collection of some kind.
            This is the base non-generic utility class for collections.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype.Collection.Universe">
            <summary>
            The universe this collection is a part of
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype.Collection.RootArchetype">
            <summary>
            Generic collections have no root archetype.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype.Collection.RootArchetypeType">
            <summary>
            Generic collections have no root archetype.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype.Collection.All">
            <summary>
            All archetypes registered to this collection
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype.Collection.ById">
            <summary>
            All archetypes registered to this collection by their Identity.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype.Collection.ByFullTypeName">
            <summary>
            All archetypes:
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.Collection.#ctor(Meep.Tech.Data.Universe)">
            <summary>
            Make a new archetype collection within the desired universe
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.Collection.Add(Meep.Tech.Data.Archetype)">
            <summary>
            Add an archetype to this collection.
            This does NOT register the archetype, this can only be used to add a
            previously registered archetype to another collection.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.Collection._remove(Meep.Tech.Data.Archetype)">
            <summary>
             used to de-register an archetype.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.Collection.Get``1">
            <summary>
            Get an archetype from this collection by it's type.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.Collection.Get(System.Type)">
            <summary>
            Get an archetype from this collection by it's type.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.Collection.TryToGet(System.Type)">
            <summary>
            Try to get an archetype from this collection by it's type.
            Returns null on failure instead of throwing.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.Collection.TryToGet(System.Type,Meep.Tech.Data.Archetype@)">
            <summary>
            Try to get an archetype from this collection by it's type.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.Collection.Get(Meep.Tech.Data.Archetype.Identity)">
            <summary>
            Get an archetype from it's Id.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.Collection.Get(System.String)">
            <summary>
            Get an archetype from it's Id.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.Collection.TryToGet(System.String)">
            <summary>
            Try to get an archetype from this collection by it's externalId.
            Returns null on failure instead of throwing.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.Collection.TryToGet(System.String,Meep.Tech.Data.Archetype@)">
            <summary>
            Try to get an archetype from this collection by it's externalId.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.Collection.GetEnumerator">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Archetype.Collection`2">
            <summary>
            A Collection of Archetypes.
            - Can be used to make a more specific child collection than Archetype[,].ArchetypeCollection.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.Collection`2.#ctor(Meep.Tech.Data.Universe)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Archetype.Identity">
            <summary>
            An Id unique to each Archetype.
            Can be used as a static key.
            This is a base, non-absract class for utility.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype.Identity.Name">
            <summary>
            The Name of this Identity.
            By default, this is used to generate the key.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype.Identity.Key">
            <summary>
            A Univerally Unique Key for this Achetype Identity.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype.Identity.Archetype">
            <summary>
            The archetype this id is for
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype.Identity.InternalIndex">
            <summary>
            Can be used as an internal value to index this identity.
            May change between runtimes/runs of a program.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.Identity.#ctor(System.String,System.String,Meep.Tech.Data.Universe)">
            <summary>
            Make a new ID.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype.Identity.UniqueIdCreationLogic(System.Object)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Meep.Tech.Data.Archetype`2">
            <summary>
            An Id unique to each Archetype.
            Can be used as a static key.
            </summary>
            <summary>
            An Id unique to each Archetype.
            Can be used as a static key.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype`2.TypeCollection">
            <summary>
            The collection containing this archetype
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype`2.BaseArchetype">
            <summary>
            The base archetype that all of the ones like it are based on.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype`2.ModelBaseType">
            <summary>
            The most basic model that this archetype can produce.d
            This is used to generat the default model constructor.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype`2.Id">
            <summary>
            The Id of this Archetype.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.GetId">
            <summary>
            Just used to get Id in case the Id namespace is overriden.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.GetDefaultIdentity(Meep.Tech.Data.Archetype)">
            <summary>
            Used to get a default Id for this type of archetype.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.#ctor(Meep.Tech.Data.Archetype.Identity,Meep.Tech.Data.Archetype{`0,`1}.Collection,Meep.Tech.Data.Universe)">
            <summary>
            The base for making a new archetype.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2._initialize">
            <summary>
            Initialize this Archetype internally
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2._initializeInitialComponents">
            <summary>
            Add all initial components
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2._deInitialize">
            <summary>
            Deinitialize this Archetype internally
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2._deInitializeInitialComponents">
            <summary>
            remove all components
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype`2.ModelConstructor">
            <summary>
            Overrideable Model Construction logic.
            Make sure to set overrides using "base.ModelConstructor ??= " in order to maintain auto-builder functionality.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.DoAfterAutoBuildSteps(`0,Meep.Tech.Data.IBuilder{`0})">
            <summary>
            An overrideable function allowing a user to modify a model after auto builder has run.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype`2.Meep#Tech#Data#IFactory#ModelConstructor">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Archetype`2._defaultEmptyBuilder">
            <summary>
            An empty builder used to help build for this archetype:
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.MakeDefaultBuilder">
            <summary>
            The builder for the base model type of this archetype.
            You can override this and add more default props to the return for utility.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.MakeBuilder(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            The builder for the base model type of this archetype.
            You can override this and add more default props to the return for utility.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype`2.BuilderConstructor">
            <summary>
            The default way a new builder is created.
            The dictionary passed in has the potential to be null
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.GetGenericBuilderConstructor">
            <summary>
            helper for getting the builder constructor from the non-generic base class
            TODO: I can probably cache this at least.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.MakeDefaultEmptyBuilder">
            <summary>
            Gets an immutable empty builder for this type to use when null was passed in:
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.ConfigureModel(Meep.Tech.Data.IBuilder{`0},`0)">
            <summary>
            Function that gets called by default in builders.
            Can be used to add logic during model setup as a shortcut.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.FinalizeModel(Meep.Tech.Data.IBuilder{`0},`0)">
            <summary>
            Function that gets called by default in builders.
            Can be used to add logic during model setup as a shortcut.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.ConfigureModel(Meep.Tech.Data.IBuilder,Meep.Tech.Data.IModel)">
            <summary>
            Function that gets called by default in builders.
            Can be used to add logic during model setup as a shortcut.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.FinalizeModel(Meep.Tech.Data.IBuilder,Meep.Tech.Data.IModel)">
            <summary>
            Function that gets called by default in builders.
            Can be used to add logic during model setup as a shortcut.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Make(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Helper for potentially making an item without initializing a Builder object.
            This does by default for models.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Make(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.Object}})">
            <summary>
            Helper for potentially making an item without initializing a Builder object.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Make``1(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.Object}})">
            <summary>
            Helper for potentially making an item without initializing a Builder object.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Make(System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Helper for potentially making an item without initializing a Builder object.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Make(System.Collections.Generic.IEnumerable{System.ValueTuple{Meep.Tech.Data.IModel.Builder.Param,System.Object}})">
            <summary>
            Helper for potentially making an item without initializing a Builder object.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Make``1(System.Collections.Generic.IEnumerable{System.ValueTuple{Meep.Tech.Data.IModel.Builder.Param,System.Object}})">
            <summary>
            Helper for potentially making an item without initializing a Builder object.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Make(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Meep.Tech.Data.IModel.Builder.Param,System.Object}})">
            <summary>
            Helper for potentially making an item without initializing a Builder object.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Make``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Meep.Tech.Data.IModel.Builder.Param,System.Object}})">
            <summary>
            Helper for potentially making an item without initializing a Builder object.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Make``1(System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Helper for potentially making an item without initializing a dictionary object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Make``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Helper for potentially making an item without initializing a dictionary object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.MakeAs``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},``0@)">
            <summary>
            Helper for potentially making an item without initializing a dictionary object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.MakeAs``1(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.Object}},``0@)">
            <summary>
            Helper for potentially making an item without initializing a dictionary object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.BuildModel(Meep.Tech.Data.IBuilder{`0})">
            <summary>
            Build the model with the builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.MakeDefault">
            <summary>
            Make a default model from this Archetype
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.MakeDefaultWith(System.Func{Meep.Tech.Data.IBuilder,Meep.Tech.Data.IBuilder})">
            <summary>
            Make a default model from this Archetype with the builder
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.MakeDefaultWith(Meep.Tech.Data.IBuilder)">
            <summary>
            Make a default model from this Archetype with the builder
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Make">
            <summary>
            Make a default model from this Archetype
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Make``1">
            <summary>
            Make a default model from this Archetype of the desired sub-type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Make(System.Func{Meep.Tech.Data.IBuilder{`0},Meep.Tech.Data.IBuilder{`0}})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Make(Meep.Tech.Data.IModel{`0}.Builder)">
            <summary>
            Make a model by passing in an builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Make(Meep.Tech.Data.IBuilder{`0})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Make(System.Action{Meep.Tech.Data.IModel{`0}.Builder})">
            <summary>
            Make a model that requires a struct based builder:
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Make``1(System.Action{Meep.Tech.Data.IModel{`0}.Builder})">
            <summary>
            Make a model that requires a struct based builder:
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Make(System.Func{Meep.Tech.Data.IBuilder,Meep.Tech.Data.IBuilder})">
            <summary>
            Make a model that requires a struct based builder:
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Make(System.Action{Meep.Tech.Data.IModel.Builder})">
            <summary>
            Make a model that requires an object based builder:
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Make``1(System.Action{Meep.Tech.Data.IModel.Builder})">
            <summary>
            Make a model that requires an object based builder:
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Make``1(Meep.Tech.Data.IModel{`0}.Builder)">
            <summary>
            Make a model from this archetype using a fully qualified builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Make``1(Meep.Tech.Data.IBuilder{`0})">
            <summary>
            Make a model from this archetype using a fully qualified builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Make``1(System.Func{Meep.Tech.Data.IModel{`0}.Builder,Meep.Tech.Data.IModel{`0}.Builder})">
            <summary>
            Make a model from this archetype by passing down and updating a default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Make(System.Func{Meep.Tech.Data.IModel{`0}.Builder,Meep.Tech.Data.IModel{`0}.Builder})">
            <summary>
            Make a model from this archetype by passing down and updating a default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Make``1(System.Func{Meep.Tech.Data.IBuilder{`0},Meep.Tech.Data.IBuilder{`0}})">
            <summary>
            Make a model that requires a struct based builder"
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.OnUnloadFrom(Meep.Tech.Data.Universe)">
            <summary>
            Called on unload before the type is actually un-registered from the universe.
            the base version of this calls OnUnload for all extra contexts, if there are any.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.TryToUnload">
            <summary>
            Attempts to unload this archetype from the universe and collections it's registered to
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods">
            <summary>
            Exposes the base set of builder Make functions publicly for ease of access. 
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithParamListParameters">
            <summary>
            Exposes the base set of builder Make functions that use a builder as their parameter publicly for ease of access. 
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithParamListParameters.Make(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithParamListParameters.Make``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithParamListParameters.Make(System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithParamListParameters.Make``1(System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithParamListParameters.Make(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.Object}})">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithParamListParameters.Make``1(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.Object}})">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithParamListParameters.Make(System.Collections.Generic.IEnumerable{System.ValueTuple{Meep.Tech.Data.IModel.Builder.Param,System.Object}})">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithParamListParameters.Make``1(System.Collections.Generic.IEnumerable{System.ValueTuple{Meep.Tech.Data.IModel.Builder.Param,System.Object}})">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithParamListParameters.Make(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Meep.Tech.Data.IModel.Builder.Param,System.Object}})">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithParamListParameters.Make``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Meep.Tech.Data.IModel.Builder.Param,System.Object}})">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters">
            <summary>
            Exposes the base set of builder Make functions that use a list of Params as their parameters publicly for ease of access. 
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters.MakeDefaultBuilder">
            <summary>
            The builder for the base model type of this archetype.
            You can override this and add more default props to the return for utility.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters.MakeBuilder(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            The builder for the base model type of this archetype.
            You can override this and add more default props to the return for utility.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters.Make">
            <summary>
            Make a default model from this Archetype
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters.Make``1">
            <summary>
            Make a default model from this Archetype
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters.Make(System.Func{Meep.Tech.Data.IBuilder{`0},Meep.Tech.Data.IBuilder{`0}})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters.Make``1(System.Func{Meep.Tech.Data.IBuilder{`0},Meep.Tech.Data.IBuilder{`0}})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters.Make(System.Action{Meep.Tech.Data.IModel.Builder})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters.Make``1(System.Action{Meep.Tech.Data.IModel.Builder})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters.Make(System.Action{Meep.Tech.Data.IModel{`0}.Builder})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters.Make``1(System.Action{Meep.Tech.Data.IModel{`0}.Builder})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters.Make(System.Func{Meep.Tech.Data.IBuilder,Meep.Tech.Data.IBuilder})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters.Make``1(System.Func{Meep.Tech.Data.IBuilder,Meep.Tech.Data.IBuilder})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters.Make(System.Func{Meep.Tech.Data.IModel{`0}.Builder,Meep.Tech.Data.IModel{`0}.Builder})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters.Make``1(System.Func{Meep.Tech.Data.IModel{`0}.Builder,Meep.Tech.Data.IModel{`0}.Builder})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters.Make(Meep.Tech.Data.IModel{`0}.Builder)">
            <summary>
            Make a model from this archetype using a fully qualified builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters.Make``1(Meep.Tech.Data.IModel{`0}.Builder)">
            <summary>
            Make a model from this archetype using a fully qualified builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters.Make(Meep.Tech.Data.IBuilder)">
            <summary>
            Make a model from this archetype using a fully qualified builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters.Make``1(Meep.Tech.Data.IBuilder)">
            <summary>
            Make a model from this archetype using a fully qualified builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters.Make(Meep.Tech.Data.IBuilder{`0})">
            <summary>
            Make a model from this archetype using a fully qualified builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters.Make``1(Meep.Tech.Data.IBuilder{`0})">
            <summary>
            Make a model from this archetype using a fully qualified builder.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.Fully">
            <summary>
            Exposes the entire base set of Make functions publicly for ease of access. 
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.Fully.Make">
            <summary>
            Make a default model from this Archetype
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.IExposeDefaultModelBuilderMakeMethods.Fully.Make``1">
            <summary>
            Make a default model from this Archetype
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Archetype`2.WithAllDefaultModelBuilders">
            <summary>
            A root archetype with IExposeDefaultModelBuilderMakeMethods.Fully implemented from the start.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithAllDefaultModelBuilders.#ctor(Meep.Tech.Data.Archetype.Identity,Meep.Tech.Data.Archetype{`0,`1}.Collection,Meep.Tech.Data.Universe)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithAllDefaultModelBuilders.Make``1">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithAllDefaultModelBuilders.Make">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithAllDefaultModelBuilders.Make``1(System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithAllDefaultModelBuilders.Make``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithAllDefaultModelBuilders.Make``1(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.Object}})">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithAllDefaultModelBuilders.Make``1(System.Collections.Generic.IEnumerable{System.ValueTuple{Meep.Tech.Data.IModel.Builder.Param,System.Object}})">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithAllDefaultModelBuilders.Make``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Meep.Tech.Data.IModel.Builder.Param,System.Object}})">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithAllDefaultModelBuilders.Make(System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithAllDefaultModelBuilders.Make(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithAllDefaultModelBuilders.Make(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.Object}})">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithAllDefaultModelBuilders.Make(System.Collections.Generic.IEnumerable{System.ValueTuple{Meep.Tech.Data.IModel.Builder.Param,System.Object}})">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithAllDefaultModelBuilders.Make(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Meep.Tech.Data.IModel.Builder.Param,System.Object}})">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Archetype`2.WithDefaultParamBasedModelBuilders">
            <summary>
            A root archetype with IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters implemented from the start.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithDefaultParamBasedModelBuilders.#ctor(Meep.Tech.Data.Archetype.Identity,Meep.Tech.Data.Universe,Meep.Tech.Data.Archetype{`0,`1}.Collection)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithDefaultParamBasedModelBuilders.Make``1(System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithDefaultParamBasedModelBuilders.Make(System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithDefaultParamBasedModelBuilders.Make``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithDefaultParamBasedModelBuilders.Make``1(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.Object}})">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithDefaultParamBasedModelBuilders.Make``1(System.Collections.Generic.IEnumerable{System.ValueTuple{Meep.Tech.Data.IModel.Builder.Param,System.Object}})">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithDefaultParamBasedModelBuilders.Make``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Meep.Tech.Data.IModel.Builder.Param,System.Object}})">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithDefaultParamBasedModelBuilders.Make(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithDefaultParamBasedModelBuilders.Make(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.Object}})">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithDefaultParamBasedModelBuilders.Make(System.Collections.Generic.IEnumerable{System.ValueTuple{Meep.Tech.Data.IModel.Builder.Param,System.Object}})">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithDefaultParamBasedModelBuilders.Make(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Meep.Tech.Data.IModel.Builder.Param,System.Object}})">
            <summary>
            Make a model from this archetype using a set of params to populate the default builder.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Archetype`2.WithDefaultBuilderBasedModelBuilders">
            <summary>
            A root archetype with IExposeDefaultModelBuilderMakeMethods.WithParamListParameters implemented from the start.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithDefaultBuilderBasedModelBuilders.#ctor(Meep.Tech.Data.Archetype.Identity,Meep.Tech.Data.Archetype{`0,`1}.Collection,Meep.Tech.Data.Universe)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithDefaultBuilderBasedModelBuilders.Make``1">
            <summary>
            Make a default model from this Archetype
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithDefaultBuilderBasedModelBuilders.Make``1(System.Func{Meep.Tech.Data.IBuilder{`0},Meep.Tech.Data.IBuilder{`0}})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithDefaultBuilderBasedModelBuilders.Make``1(System.Action{Meep.Tech.Data.IModel.Builder})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithDefaultBuilderBasedModelBuilders.Make``1(System.Action{Meep.Tech.Data.IModel{`0}.Builder})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithDefaultBuilderBasedModelBuilders.Make``1(System.Func{Meep.Tech.Data.IBuilder,Meep.Tech.Data.IBuilder})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithDefaultBuilderBasedModelBuilders.Make``1(System.Func{Meep.Tech.Data.IModel{`0}.Builder,Meep.Tech.Data.IModel{`0}.Builder})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithDefaultBuilderBasedModelBuilders.Make``1(Meep.Tech.Data.IModel{`0}.Builder)">
            <summary>
            Make a model from this archetype using a fully qualified builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithDefaultBuilderBasedModelBuilders.Make``1(Meep.Tech.Data.IBuilder{`0})">
            <summary>
            Make a model from this archetype using a fully qualified builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithDefaultBuilderBasedModelBuilders.Make">
            <summary>
            Make a default model from this Archetype
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithDefaultBuilderBasedModelBuilders.Make(System.Func{Meep.Tech.Data.IBuilder{`0},Meep.Tech.Data.IBuilder{`0}})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithDefaultBuilderBasedModelBuilders.Make(System.Action{Meep.Tech.Data.IModel.Builder})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithDefaultBuilderBasedModelBuilders.Make(System.Action{Meep.Tech.Data.IModel{`0}.Builder})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithDefaultBuilderBasedModelBuilders.Make(System.Func{Meep.Tech.Data.IBuilder,Meep.Tech.Data.IBuilder})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithDefaultBuilderBasedModelBuilders.Make(System.Func{Meep.Tech.Data.IModel{`0}.Builder,Meep.Tech.Data.IModel{`0}.Builder})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithDefaultBuilderBasedModelBuilders.Make(Meep.Tech.Data.IModel{`0}.Builder)">
            <summary>
            Make a model from this archetype using a fully qualified builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.WithDefaultBuilderBasedModelBuilders.Make(Meep.Tech.Data.IBuilder{`0})">
            <summary>
            Make a model from this archetype using a fully qualified builder.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Archetype`2.Collection">
            <summary>
            A Collection of Archetypes.
            This is just an Archetype.Collection[&#44;] that is pre-built for the containing Archetype[&#44;] type.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Archetype`2.Collection.Branch`1">
            <summary>
            A Branch of an Collection of Archetypes, used to catalog a branch of the archetype tree.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype`2.Collection.Branch`1.RootArchetype">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype`2.Collection.Branch`1.RootArchetypeType">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype`2.Collection.Branch`1.All">
            <summary>
            All archetypes registered to this collection
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype`2.Collection.Branch`1.ById">
            <summary>
            All archetypes registered to this collection by their Identity.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.Branch`1.#ctor(Meep.Tech.Data.Universe)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.Branch`1.Get``1">
            <summary>
            Get an archetype from this collection by it's type.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.Branch`1.Get(System.Type)">
            <summary>
            Get an archetype from this collection by it's type.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.Branch`1.Get``1(System.Type)">
            <summary>
            Get an archetype from this collection by it's type.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.Branch`1.TryToGet(System.Type)">
            <summary>
            Try to get an archetype from this collection by it's type.
            Returns null on failure instead of throwing.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.Branch`1.TryToGet``1(System.Type)">
            <summary>
            Try to get an archetype from this collection by it's type.
            Returns null on failure instead of throwing.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.Branch`1.TryToGet(System.Type,`2@)">
            <summary>
            Try to get an archetype from this collection by it's type.
            Returns null on failure instead of throwing.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.Branch`1.TryToGet``1(System.Type,``0@)">
            <summary>
            Try to get an archetype from this collection by it's type.
            Returns null on failure instead of throwing.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.Branch`1.Get(Meep.Tech.Data.Archetype{`0,`1}.Identity)">
            <summary>
            Get an archetype from it's Id.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.Branch`1.Get``1(Meep.Tech.Data.Archetype{`0,`1}.Identity)">
            <summary>
            Get an archetype from it's Id.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.Branch`1.Get``1(System.String)">
            <summary>
            Get an archetype from it's Id.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.Branch`1.Get(System.String)">
            <summary>
            Get an archetype from it's Id.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.Branch`1.GetEnumerator">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype`2.Collection.RootArchetype">
            <summary>
            The root archetype. This may be null if the root archetype type is abstract.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype`2.Collection.RootArchetypeType">
            <summary>
             The archetype type of the root archetype of this collection (if it's not abstract).
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype`2.Collection.All">
            <summary>
            All archetypes registered to this collection
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype`2.Collection.ById">
            <summary>
            All archetypes registered to this collection by their Identity.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.#ctor(Meep.Tech.Data.Universe)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.Add(Meep.Tech.Data.Archetype)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection._remove(Meep.Tech.Data.Archetype)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.Get``1">
            <summary>
            Get an archetype from this collection by it's type.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.Get(System.Type)">
            <summary>
            Get an archetype from this collection by it's type.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.Get``1(System.Type)">
            <summary>
            Get an archetype from this collection by it's type.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.TryToGet(System.Type)">
            <summary>
            Try to get an archetype from this collection by it's type.
            Returns null on failure instead of throwing.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.TryToGet``1(System.Type)">
            <summary>
            Try to get an archetype from this collection by it's type.
            Returns null on failure instead of throwing.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.TryToGet(System.Type,`1@)">
            <summary>
            Try to get an archetype from this collection by it's type.
            Returns null on failure instead of throwing.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.TryToGet``1(System.Type,``0@)">
            <summary>
            Try to get an archetype from this collection by it's type.
            Returns null on failure instead of throwing.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.Get(Meep.Tech.Data.Archetype{`0,`1}.Identity)">
            <summary>
            Get an archetype from it's Id.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.Get``1(Meep.Tech.Data.Archetype{`0,`1}.Identity)">
            <summary>
            Get an archetype from it's Id.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.Get``1(System.String)">
            <summary>
            Get an archetype from it's Id.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.Get(System.String)">
            <summary>
            Get an archetype from it's Id.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.TryToGet(System.String)">
            <summary>
            Try to get an archetype from this collection by it's externalId.
            Returns null on failure instead of throwing.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.TryToGet(System.String,`1@)">
            <summary>
            Try to get an archetype from this collection by it's externalId.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.TryToGet``1(System.String)">
            <summary>
            Try to get an archetype from this collection by it's externalId.
            Returns null on failure instead of throwing.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.TryToGet``1(System.String,``0@)">
            <summary>
            Try to get an archetype from this collection by it's externalId.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Collection.GetEnumerator">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetype`2.DefaultCollection">
            <summary>
            Quick link to the collection for the default universe
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Archetype`2.Identity">
            <summary>
            An Id unique to each Archetype.
            Can be used as a static key.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Identity.#ctor(System.String,System.String,Meep.Tech.Data.Universe,System.String)">
            <summary>
            Make a new identiy for this Archetype Base Type
            </summary>
            <param name="name">Used to generate the final part of the key. Spaces are removed before then.</param>
            <param name="keyPrefixEndingAdditions">Added to the key right before the end here: Type..{keyPrefixEndingAdditions}.name</param>
            <param name="keyOverride">can be used to fully replace the key if you want a different key and name</param>
        </member>
        <member name="M:Meep.Tech.Data.Archetype`2.Identity.#ctor(System.String,System.String,System.String,Meep.Tech.Data.Universe,System.String)">
            <summary>
            Make a new identiy for this Archetype Base Type
            </summary>
            <param name="name">Used to generate the final part of the key. Spaces are removed before then.</param>
            <param name="keyPrefixEndingAdditions">Added to the key right before the end here: Type..{keyPrefixEndingAdditions}.name</param>
            <param name="baseKeyStringOverride">Overrides the type fullname.</param>
            <param name="keyOverride">can be used to fully replace the key if you want a different key and name</param>
        </member>
        <member name="T:Meep.Tech.Data.ModelBuilderMethodAttribute">
            <summary>
            Used to mark a function as a Model Builder Method.
            Public methods that produce an IModel and start with 'Make' are automatically considered Model Builder Methods. 
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IBuilderSource">
            <summary>
            This can produce model builders
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IBuilderSource.MakeDefaultBuilder">
            <summary>
            The builder for the base model type of this archetype.
            You can override this and add more default props to the return for utility.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IBuilderSource.MakeBuilder(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            The builder for the base model type of this archetype.
            You can override this and add more default props to the return for utility.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IComponent">
            <summary>
            The base class for modular data holders for models and archetypes
            This is the non-generic for utility reasons.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IComponent.IBuilderFactory">
            <summary>
            The default factory for Models without Archetypes.
            One of these is instantiated for each Model[] class and IComponent[] class by default.
            This is the base interface.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IComponent.IBuilderFactory.Key">
            <summary>
            The key for the component type.
            This is the Component Base Type (the type that inherits initially from one of the IComponent interfaces)
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IComponent.IBuilderFactory.IncludeInParentModelEqualityChecks">
            <summary>
            If the component made from this factory should be included in equality checks for the parent object
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IComponent.IBuilderFactory.Make">
            <summary>
            Make a default component for an archetype.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meep.Tech.Data.IComponent.IBuilderFactory.Make(Meep.Tech.Data.IBuilder)">
            <summary>
            Make a default component for an archetype.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Meep.Tech.Data.IComponent.Universe">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IComponent.Factory">
            <summary>
            Access to the builder factory for this type of component
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IComponent.Key">
            <summary>
            A key used to index this type of component. There can only be one componet per key on a model or archetype
            This is the Component Base Type (the type that inherits initially from one of the IComponent interfaces)
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IComponent.Meep#Tech#Data#IModel#Configure(Meep.Tech.Data.IBuilder)">
            <summary>
            Default configuration
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IComponent.FinalizeAfterParent(Meep.Tech.Data.IModel,Meep.Tech.Data.IBuilder)">
            <summary>
            optional finalization logic for components pre-attached to models after the model has been finalized
            TODO: this should be in an interface probably.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IComponent.ToJson(Newtonsoft.Json.JsonSerializer)">
            <summary>
            Turn the component into a serialized data object.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IComponent.FromJson(Newtonsoft.Json.Linq.JObject,Meep.Tech.Data.IModel,System.Type,Meep.Tech.Data.Universe,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Make a component from a jobject
            </summary>
            TODO: This change should propogate to the parent type to somehow. Fix the new!.
        </member>
        <member name="M:Meep.Tech.Data.IComponent.FromJson(Newtonsoft.Json.Linq.JObject,Meep.Tech.Data.IModel,System.Type,Meep.Tech.Data.Universe,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.Object}})">
            <summary>
            Make a component from a jobject
            </summary>
            TODO: This change should propogate to the parent type to somehow. Fix the new!.
        </member>
        <member name="M:Meep.Tech.Data.IComponent.FromJson(Newtonsoft.Json.Linq.JObject,System.Type,Meep.Tech.Data.Universe,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Make a component from a jobject
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IComponent.FromJson(Newtonsoft.Json.Linq.JObject,System.Type,Meep.Tech.Data.Universe,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.Object}})">
            <summary>
            Make a component from a jobject
            </summary>
            TODO: This change should propogate to the parent type to somehow. Fix the new!.
        </member>
        <member name="T:Meep.Tech.Data.IComponent.IHaveContract">
            <summary>
            Base interface for having a contract.
            Use the extension of this under IModel or Archetype instead of extending this base version.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IComponent.IIsRestrictedToCertainTypes">
            <summary>
            Can be used to indicate that this component is restricted to a specific branch of models or archetypes based on the provided base type.
            </summary>
            <seealso cref="T:Meep.Tech.Data.Archetype.IComponent.IIsRestrictedToCertainTypes"/>
            <seealso cref="T:Meep.Tech.Data.Archetype.IComponent.IIsRestrictedTo`1"/>
            <seealso cref="T:Meep.Tech.Data.IModel.IComponent.IIsRestrictedToCertainTypes"/>
            <seealso cref="T:Meep.Tech.Data.IModel.IComponent.IIsRestrictedTo`1"/>
        </member>
        <member name="P:Meep.Tech.Data.IComponent.IIsRestrictedToCertainTypes.RestrictedTo">
            <summary>
            The base type this component is restricted to use with.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IComponent.IIsRestrictedTo`1">
            <summary>
            Can be used to indicate that this component is restricted to a specific branch of models or archetypes based on the provided base type.
            </summary>
            <seealso cref="T:Meep.Tech.Data.Archetype.IComponent.IIsRestrictedToCertainTypes"/>
            <seealso cref="T:Meep.Tech.Data.Archetype.IComponent.IIsRestrictedTo`1"/>
            <seealso cref="T:Meep.Tech.Data.IModel.IComponent.IIsRestrictedToCertainTypes"/>
            <seealso cref="T:Meep.Tech.Data.IModel.IComponent.IIsRestrictedTo`1"/>
        </member>
        <member name="P:Meep.Tech.Data.IComponent.IIsRestrictedTo`1.Meep#Tech#Data#IComponent#IIsRestrictedToCertainTypes#RestrictedTo">
            <summary>
            The base type this component is restricted to use with.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IComponent.IDoOnAdd">
            <summary>
            Interface indicating this component should do something when added to a model.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IComponent.IDoOnAdd.ExecuteWhenAdded(Meep.Tech.Data.IReadableComponentStorage)">
            <summary>
            Executed when this is added to a model.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IComponent.ILiteBuilder">
            <summary>
            A simpler, struct based builder for components
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IComponent.ILiteBuilder._params">
            <summary>
            The param collection.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IComponent.IUseDefaultUniverse">
            <summary>
            Just makes the struct based model or component use the default universe so you don't need to set it yourself
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IComponent.IUseDefaultUniverse.Meep#Tech#Data#IModel#Universe">
            <summary>
            This can be overriden if you want, but by default, struct based components don't have universe info at hand
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IComponent.IUseDefaultUniverse.Meep#Tech#Data#IComponent#Universe">
            <summary>
            This can be overriden if you want, but by default, struct based components don't have universe info at hand
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IComponent`1">
            <summary>
            The base class for modular data holders for models and archetypes
            </summary>
            <summary>
            The base interface for components without branching archet
            </summary>
            <summary>
            The base class for modular data holders for models and archetypes
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IComponent`1.BuilderFactory">
            <summary>
            General Base Builder Factory for Components.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IComponent`1.BuilderFactory.DefaultTestParams">
            <summary>
            Default test params for this builder factory.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IComponent`1.BuilderFactory.Key">
            <summary>
            The key for the component type.
            This is the Component Base Type (the type that inherits initially from one of the IComponent interfaces)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Meep.Tech.Data.IComponent`1.BuilderFactory.BuilderConstructor" -->
        <member name="T:Meep.Tech.Data.IComponent`1.IHaveContractWith`1">
            <summary>
            If this component has a contract with another componnet.
            Contracts are executed after both component types have been added to the same model or archetype.
            Use the extension of this under IModel or Archetype instead of extending this base version.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IComponent`1.IHaveContractWith`1.ExecuteContractWith(`1)">
            <summary>
            Executed when both of these components are added to the same object
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IComponent`1.Builder">
            <summary>
            Default builder class for components. Pretty much the same as the model based one.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IComponent`1.LiteBuilder">
            <summary>
            A simpler builder for components
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IComponent`1.LiteBuilder.Archetype">
            <summary>
            The factory this is for.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IComponent`1.LiteBuilder.Parent">
            <summary>
            If this builder is passed to a child model or component, the original is made the parent.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IComponent`1.LiteBuilder.InitializeModel">
            <summary>
            Produce a new instance of the model type.
            this usually is just calling => new Model(this) to help set the type variable or something.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IComponent`1.LiteBuilder.ConfigureModel">
            <summary>
            Configure and set param on the empty new model from InitializeModel.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IComponent`1.LiteBuilder.FinalizeModel">
            <summary>
            Logic to finish setting up the model.
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.IComponent`1.LiteBuilder._params">
            <summary>
            The param collection.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IComponent`1.LiteBuilder.Universe">
            <summary>
            The universe this builder is part of
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IComponent`1.LiteBuilder.Parameters">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Data.IComponent`1.LiteBuilder.Build">
            <summary>
            Build the model.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IComponent`1.LiteBuilder.ForEachParam(System.Action{System.ValueTuple{System.String,System.Object}})">
            <summary>
            Do something with each paramter in the builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IComponent`1.LiteBuilder.Append(System.String,System.Object)">
            <summary>
            append and return.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IFactory">
            <summary>
            These make models
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IFactory.Id">
            <summary>
            The Id of this Archetype.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IFactory.ModelConstructor">
            <summary>
            Overrideable Model Constructor
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IFactory.JsonStringConverter">
            <summary>
            Used to convert an Archetype to a general string for storage
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IModel">
            <summary>
            The base interface for all XBam Models.
            A Model is a mutable grouping of data fields that can be produced by an Archetype.
            This is the non generic for Utility only, don't inherit from this direclty; Extend IModel[], Model[], or Model[,], or  Model[,].IFromInterface instead.
            </summary>
            <see cref="T:Meep.Tech.Data.IModel`1"/>
            <see cref="T:Meep.Tech.Data.Model`1"/>
            <see cref="T:Meep.Tech.Data.Model`2"/>
            <see cref="T:Meep.Tech.Data.Model`2.IFromInterface"/>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Meep.Tech.Data.IModel.IBuilderFactory" -->
        <member name="T:Meep.Tech.Data.IModel.IReadableComponentStorage">
            <summary>
            Readble Component Storage more specific to a model.
            Includes serialization requirements...
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IModel.IReadableComponentStorage.Components">
            <summary>
            The components, which will be serialized with the model.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IModel.IWriteableComponentStorage">
            <summary>
            Readble Component Storage more specific to a model.
            Includes serialization requirements...
            <inheritdoc/>
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IModel.IComponent.IIsRestrictedTo`1">
            <summary>
            Can be used to indicate that this component is restricted to specific types of models based on the provided base model type.
            </summary>
            <seealso cref="T:Meep.Tech.Data.Archetype.IComponent.IIsRestrictedToCertainTypes"/>
            <seealso cref="T:Meep.Tech.Data.Archetype.IComponent.IIsRestrictedTo`1"/>
            <seealso cref="T:Meep.Tech.Data.IModel.IComponent.IIsRestrictedToCertainTypes"/>
            <seealso cref="T:Meep.Tech.Data.IModel.IComponent.IIsRestrictedTo`1"/>
        </member>
        <member name="M:Meep.Tech.Data.IModel.IComponent.IIsRestrictedTo`1.Meep#Tech#Data#IModel#IComponent#IIsRestrictedToCertainTypes#IsCompatableWith(Meep.Tech.Data.IModel)">
            <summary>
            Check if this is compatable with a model
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IModel.IComponent.IIsRestrictedToCertainTypes">
            <summary>
            Can be used to indicate that this component is restricted to specific types of models based on the provided base model type.
            </summary>
            <seealso cref="T:Meep.Tech.Data.Archetype.IComponent.IIsRestrictedToCertainTypes"/>
            <seealso cref="T:Meep.Tech.Data.Archetype.IComponent.IIsRestrictedTo`1"/>
            <seealso cref="T:Meep.Tech.Data.IModel.IComponent.IIsRestrictedToCertainTypes"/>
            <seealso cref="T:Meep.Tech.Data.IModel.IComponent.IIsRestrictedTo`1"/>
        </member>
        <member name="M:Meep.Tech.Data.IModel.IComponent.IIsRestrictedToCertainTypes.IsCompatableWith(Meep.Tech.Data.IModel)">
            <summary>
            Check if this is compatable with a model
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IModel.IComponent`1">
            <summary>
            A Component for an Model. Contains datas. Logic should usually be kept to Archetypes
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel.IComponent`1.SetDefaultXBamConstructor(Meep.Tech.Data.IComponent.IBuilderFactory,System.Func{Meep.Tech.Data.IBuilder{`0},`0})">
            <summary>
            Can be used to set the model ctor during initalization.
            This should be used in the Static constructor for this type only.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IModel.IComponent`1.IHaveContractWith`1">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Meep.Tech.Data.IModel.Builder">
            <summary>
            A modifyable parameter container that is used to build a model.
            The non-generic base class for utility.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IModel.Builder.Param">
            <summary>
            A static parameter constant for a model builder
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IModel.Builder.Param.Key">
            <summary>
            A Univerally Unique Key for this param.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IModel.Builder.Param.HasDefaultValue">
            <summary>
            If this param has a pre-set default.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IModel.Builder.Param.ValueType">
            <summary>
            An optional pre-set type to constrain the value to
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IModel.Builder.Param.DefaultValue">
            <summary>
            A base default value for this param.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IModel.Builder.Param.IException">
            <summary>
            Parameter related exceptions.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IModel.Builder.Param.MissingException">
            <summary>
            Exception for a missing required parameter
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IModel.Builder.Param.MissmatchException">
            <summary>
            Exception for a param of the wrong type
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IModel.Builder.Archetype">
            <summary>
            The archetype/factory using this builder.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IModel.Builder.Universe">
            <summary>
            The universe this builder is building in
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IModel.Builder.Parent">
            <summary>
            If this builder is passed to a child model or component, the original is made the parent.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IModel.Builder.Parameters">
            <summary><inheritdoc/></summary>
        </member>
        <member name="F:Meep.Tech.Data.IModel.Builder._isImmutable">
            <summary>
            If this builder can be modified
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel.Builder.#ctor(Meep.Tech.Data.Archetype,System.Boolean,Meep.Tech.Data.Universe)">
            <summary>
            Empty new builder
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel.Builder.#ctor(Meep.Tech.Data.Archetype,System.Collections.Generic.Dictionary{System.String,System.Object},Meep.Tech.Data.Universe)">
            <summary>
            New builder from a collection of param names
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel.Builder.#ctor(Meep.Tech.Data.Archetype,System.Collections.Generic.Dictionary{Meep.Tech.Data.IModel.Builder.Param,System.Object},Meep.Tech.Data.Universe)">
            <summary>
            New builder from a collection of params
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel.Builder.MakeNewBuilderAndCopyParams(Meep.Tech.Data.IBuilder,Meep.Tech.Data.Archetype)">
            <summary>
            Copy a builder for a new target type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel.Builder.Add(System.String,System.Object)">
            <summary>
            Add override
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Meep.Tech.Data.IModel.Builder.AsImmutable">
            <summary>
            Just make this immutible.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel.Builder.ForEachParam(System.Action{System.ValueTuple{System.String,System.Object}})">
            <summary>
            Do something with each paramter in the builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel.Builder.Append(System.String,System.Object)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Meep.Tech.Data.IModel.Builder.DoNotBuildThisTypeException">
            <summary>
            Can be used for preventing a mappable type from retries while being built
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IModel.Factory">
            <summary>
            The factory or archetype used to build this model
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IModel.Universe">
            <summary>
            The universe this model was made in
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel.Setup(Meep.Tech.Data.Universe)">
            <summary>
            Overrideable static initializer for model classes.
            Called right after the static initializer
            </summary>
            <param name="universe">The current universe being set up</param>
        </member>
        <member name="M:Meep.Tech.Data.IModel.Initialize(Meep.Tech.Data.IBuilder)">
            <summary>
            Initializes the universe, archetype, factory and other built in model links
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel.Configure(Meep.Tech.Data.IBuilder)">
            <summary>
            Can be used to initially configure a model in the base ctor.
            Account for a null builder
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel.FinishDeserialization">
            <summary>
            (optional)Finish deserializing the model
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel.Copy">
            <summary>
            Copy the model by serializing and deserializing it.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel.ToJson(Newtonsoft.Json.JsonSerializer)">
            <summary>
            Turn the model into a serialized data object.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel.FromJson(Newtonsoft.Json.Linq.JObject,System.Type,Meep.Tech.Data.Universe,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Deserialize a model from a json object
            </summary>
            <param name="deserializeToTypeOverride">You can use this to try to make JsonSerialize use 
               a different Type's info for deserialization than the default returned from GetModelTypeProducedBy</param>
            <param name="withConfigurationParameters">configuration paramaters to use while re-building the model.</param>
        </member>
        <member name="T:Meep.Tech.Data.IModel.IUseDefaultUniverse">
            <summary>
            Just makes the struct based model or component use the default universe so you don't need to set it yourself
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IModel.IUseDefaultUniverse.Meep#Tech#Data#IModel#Universe">
            <summary>
            This can be overriden if you want, but by default, struct based components don't have universe info at hand
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Model`1">
            <summary>
            The base class for a mutable data model that can be produced by an Archetype.
            This includes a components system, and uses a built in default Builder as it's base archetype.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Model`1.Factory">
            <summary>
            The factory that was used to make this object
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`1.FromJson(Newtonsoft.Json.Linq.JObject,System.Type,Meep.Tech.Data.Universe,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Deserialize a model from json as a TModelBase
            </summary>
            <param name="deserializeToTypeOverride">You can use this to try to make JsonSerialize 
               use a different Type's info for deserialization than the default returned from GetModelTypeProducedBy</param>
        </member>
        <member name="M:Meep.Tech.Data.Model`1.FromJsonAs``1(Newtonsoft.Json.Linq.JObject,System.Type,Meep.Tech.Data.Universe,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Deserialize a model from json as a TModelBase
            </summary>
            <typeparam name="TModel">The type to cast the produced model to. Not the same as deserializeToTypeOverride</typeparam>
            <param name="deserializeToTypeOverride">You can use this to try to make JsonSerialize 
               use a different Type's info for deserialization than the default returned from GetModelTypeProducedBy</param>
        </member>
        <member name="M:Meep.Tech.Data.Model`1.Meep#Tech#Data#IModel#Initialize(Meep.Tech.Data.IBuilder)">
            <summary>
            For the base configure calls
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`1.OnInitialized(Meep.Tech.Data.IBuilder{`0})">
            <summary>
            Can be used to initialize a model after the ctor call in xbam
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Model`1.WithComponents">
            <summary>
            A Model with Components built in
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Model`1.WithComponents.Components">
            <summary>
            Publicly readable components
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Model`1.WithComponents._components">
            <summary>
            Internally stored components
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Model`1.WithComponents.Meep#Tech#Data#IReadableComponentStorage#ComponentsByBuilderKey">
            <summary>
            The accessor for the default Icomponents implimentation
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Model`1.WithComponents.Meep#Tech#Data#IReadableComponentStorage#ComponentsWithWaitingContracts">
            <summary>
            The accessor for the default Icomponents implimentation
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`1.WithComponents.Equals(System.Object)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`1.WithComponents.GetComponent``1">
            <summary>
            Get a component if it exists. Throws if it doesn't
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`1.WithComponents.GetComponent(System.String)">
            <summary>
            Get a component if it exists. Throws if it doesn't
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`1.WithComponents.GetComponent``1(System.String)">
            <summary>
            Get a component if it exists. Throws if it doesn't
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`1.WithComponents.TryToGetComponent(System.Type,Meep.Tech.Data.IModel.IComponent@)">
            <summary>
            Get a component if this has a component of that given type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`1.WithComponents.HasComponent(System.Type)">
            <summary>
            Check if this has a given component by base type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`1.WithComponents.HasComponent(System.String)">
            <summary>
            Check if this has a component matching the given object
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`1.WithComponents.TryToGetComponent(System.String,Meep.Tech.Data.IModel.IComponent@)">
            <summary>
            Get a component if this has that given component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`1.WithComponents.HasComponent(Meep.Tech.Data.IModel.IComponent)">
            <summary>
            Check if this has a component matching the given object
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`1.WithComponents.TryToGetComponent(Meep.Tech.Data.IModel.IComponent,Meep.Tech.Data.IModel.IComponent@)">
            <summary>
            Get a component if this has that given component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`1.WithComponents.AddComponent(Meep.Tech.Data.IModel.IComponent)">
            <summary>
            Add a new component, throws if the component key is taken already
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`1.WithComponents.AddNewComponent``1(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.Object}})">
            <summary>
            Add a new component, throws if the component key is taken already
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`1.WithComponents.AddNewComponent``1(System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Add a new component, throws if the component key is taken already
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`1.WithComponents.UpdateComponent(Meep.Tech.Data.IModel.IComponent)">
            <summary>
            replace an existing component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`1.WithComponents.UpdateComponent``1(System.Func{``0,``0})">
            <summary>
            update an existing component, given it's current data
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`1.WithComponents.AddOrUpdateComponent(Meep.Tech.Data.IModel.IComponent)">
            <summary>
            Add or replace a component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`1.WithComponents.RemoveComponent(Meep.Tech.Data.IModel.IComponent)">
            <summary>
            Remove an existing component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`1.WithComponents.RemoveComponent``1">
            <summary>
            Remove an existing component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`1.WithComponents.RemoveComponent``1(Meep.Tech.Data.IComponent@)">
            <summary>
            Remove an existing component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`1.WithComponents.RemoveComponent(System.Type)">
            <summary>
            Remove an existing component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`1.WithComponents.RemoveComponent(System.Type,Meep.Tech.Data.IComponent@)">
            <summary>
            Remove an existing component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`1.WithComponents.RemoveComponent(System.String,Meep.Tech.Data.IModel.IComponent@)">
            <summary>
            Remove and get an existing component
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IModel`1">
            <summary>
            The base interface for all 'Simple' XBam Models.
            A Model is a mutable grouping of data fields that can be produced by an Archetype.
            Simple Models have a single non-branching Archetype called a BuilderFactory.
            </summary>
            <see cref="T:Meep.Tech.Data.Model`1"/>
            <see cref="T:Meep.Tech.Data.Model`2"/>
            <see cref="T:Meep.Tech.Data.Model`2.IFromInterface"/>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Meep.Tech.Data.IModel`1.BuilderFactory" -->
        <member name="T:Meep.Tech.Data.IModel`1.BuilderFactory`1">
            <summary>
            The base of all BuilderFactories.
            Custom factories aren't built initially, you should maintain the singleton pattern yourself by setting it
            in the static constructor, or the Setup(Universe) override
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IModel`1.BuilderFactory`1.ModelBaseType">
            <summary>
            Used for Buidler Factories to easily change the base type
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IModel`1.BuilderFactory`1.Meep#Tech#Data#IFactory#ModelConstructor">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IModel`1.BuilderFactory`1.DefaultInstance">
            <summary>
            The static instance of this type of builder factory.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel`1.BuilderFactory`1.InstanceFor(Meep.Tech.Data.Universe)">
            <summary>
            The static instance of this type of builder factory.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Meep.Tech.Data.IModel`1.BuilderFactory`1.BuilderConstructor" -->
        <member name="T:Meep.Tech.Data.IModel`1.Builder">
            <summary>
            A modifyable parameter container that is used to build a model.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IModel`1.Builder.Param">
            <summary>
            A parameter constant for a model builder
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IModel`1.Builder.Param.All">
            <summary>
            All params registered for this type of model builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel`1.Builder.Param.#ctor(System.String)">
            <summary>
            Make a new super basic param.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel`1.Builder.Param.#ctor(System.String,System.Type)">
            <summary>
            Make a param clamped to a specific type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel`1.Builder.Param.#ctor(System.String,System.Object,System.Type)">
            <summary>
            Make a param with a default value.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel`1.Builder.Param.op_Implicit(Meep.Tech.Data.IModel{`0}.Builder.Param)~System.String">
            <summary>
            Params can be auto converted into strings.
            </summary>
            <param name="param"></param>
        </member>
        <member name="P:Meep.Tech.Data.IModel`1.Builder.InitializeModel">
            <summary>
            Produce a new instance of the model type.
            this usually is just calling => new Model(this) to help set the type variable or something.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IModel`1.Builder.ConfigureModel">
            <summary>
            Configure and set param on the empty new model from InitializeModel.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IModel`1.Builder.FinalizeModel">
            <summary>
            Logic to finish setting up the model.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel`1.Builder.#ctor(Meep.Tech.Data.Archetype,Meep.Tech.Data.Universe)">
            <summary>
            Empty new builder
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel`1.Builder.#ctor(Meep.Tech.Data.Archetype,System.Boolean,Meep.Tech.Data.Universe)">
            <summary>
            Empty new builder, immutable, for internal use only
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel`1.Builder.#ctor(Meep.Tech.Data.Archetype,System.Collections.Generic.Dictionary{System.String,System.Object},Meep.Tech.Data.Universe)">
            <summary>
            New builder from a collection of param names
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel`1.Builder.#ctor(Meep.Tech.Data.Archetype,System.Collections.Generic.Dictionary{Meep.Tech.Data.IModel{`0}.Builder.Param,System.Object},Meep.Tech.Data.Universe)">
            <summary>
            New builder from a collection of params
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel`1.Builder.Append(System.String,System.Object)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel`1.Builder.Build">
            <summary>
            Build the model.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel`1.Builder._initializeModelComponents(Meep.Tech.Data.IModel.IReadableComponentStorage)">
            <summary>
            Loop though each model component and initialize them.
            This also adds all model data componnets linked to an archetype component first.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel`1.Builder._finalizeModelComponents(Meep.Tech.Data.IModel.IReadableComponentStorage)">
            <summary>
            Loop though each model component and finalize them.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel`1.FromJson(Newtonsoft.Json.Linq.JObject,System.Type,Meep.Tech.Data.Universe,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Deserialize a model from json as a TModelBase
            </summary>
            <param name="deserializeToTypeOverride">You can use this to try to make JsonSerialize 
               use a different Type's info for deserialization than the default returned from GetModelTypeProducedBy</param>
        </member>
        <member name="T:Meep.Tech.Data.Configuration.AllowLazyArchetypeInitializationsOnNewLazyEnumerationInitializationsAttribute">
            <summary>
            For types that implement ISplayed, this allows new types to be built when a new enum is added during runtime.
            It takes the IBuildOneForEach type as an argument.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Configuration.BuildAllDeclaredEnumValuesOnInitialLoadAttribute">
            <summary>
            Can be used for Enumerations to tell the loader to try to pre-initialize all static enum values in this class.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Configuration.Loader">
            <summary>
            Loads archetypes.
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Configuration.Loader._assemblyTypesToBuild">
            <summary>
            The assembly types that will be built in order
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Configuration.Loader._failedArchetypes">
            <summary>
            The types that failed entirely
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Configuration.Loader._failedEnumerations">
            <summary>
            The types that failed entirely
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Configuration.Loader._failedModels">
            <summary>
            The types that failed entirely
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Configuration.Loader._failedComponents">
            <summary>
            The types that failed entirely
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Configuration.Loader._uninitializedArchetypes">
            <summary>
            The types we need to construct and map data to
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Configuration.Loader._uninitializedModels">
            <summary>
            The types we need to construct and map data to
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Configuration.Loader._uninitializedComponents">
            <summary>
            The types we need to construct and map data to
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Configuration.Loader._uninitializedEnums">
            <summary>
            The types we need to construct and map data to
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Configuration.Loader._initializedArchetypes">
            <summary>
            The types that have been constructed and still need model data mapped to them.
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Configuration.Loader._finishedArchetypes">
            <summary>
            The types that have been finished.
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Configuration.Loader._remainingInitializationAttempts">
            <summary>
            How many initalization attempts are remaining
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Configuration.Loader._remainingFinalizationAttempts">
            <summary>
            How many finalization attempts are remaining
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Configuration.Loader._unorderedAssembliesToLoad">
            <summary>
            Externally fetched assemblies for loading
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Configuration.Loader._orderedAssemblyFiles">
            <summary>
            The assemblies from Options.PreOrderedAssemblyFiles along with order.json combined and ready to use
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.Options">
            <summary>
            The specified settings for this loader
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.Universe">
            <summary>
            The universe this loader creates
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.IsFinished">
            <summary>
            If all archetypes have been initialized and the loader is finished.
            Once this is true, you cannot modify archetypes or their collections anymore.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.Failures">
            <summary>
            Types that failed to initialize and their exceptions.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.AssemblyLoadOrder">
            <summary>
            Assembled mod load order.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.InitializedTypes">
            <summary>
            Types that failed to initialize and their exceptions.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.CoreAssemblies">
            <summary>
            The assemblies included in the pre-included assemblies as well as the ones the main one is dependent on.
            These are not considered mods.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.UninitializedTypesCount">
            <summary>
            The total count of currently uninitialized types.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader.#ctor(Meep.Tech.Data.Configuration.Loader.Settings)">
            <summary>
            Make a new Archetype Loader.
            This can be made to make an Archetype Universe instance.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader.Initialize(Meep.Tech.Data.Universe)">
            <summary>
            Try to load all archetypes, using the Settings
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader.AddInitializedArchetype(Meep.Tech.Data.Archetype)">
            <summary>
            Can be used to add an initialized archetype to this loader from extra contexts etc while loading is ongoing.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader.AddArchetypeFailure(System.Type,System.Exception)">
            <summary>
            Can be used to add info about an archetype that failed to be loaded.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader.AddModelTypeFailure(System.Type,System.Exception)">
            <summary>
            Can be used to add info about an model that failed to be loaded.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader.AddComponentTypeFailure(System.Type,System.Exception)">
            <summary>
            Can be used to add info about an model that failed to be loaded.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader.AddEnumValueFailure(System.Reflection.PropertyInfo,System.Exception)">
            <summary>
            Can be used to add info about an enum that failed to be loaded.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader._initalizeCompatableArchetypeData">
            <summary>
            Set up initial settings.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader._initializeModelSerializerSettings">
            <summary>
            Initialize the model serializer
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader._loadModLoadOrderFromJson">
            <summary>
            Load all the mods from the mod folder
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Configuration.Loader.LoadOrderItem">
            <summary>
            An item for setting up the load order; order.json file.
            Used to specify the order to load assemblies in
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.LoadOrderItem.Priority">
            <summary>
            The order in the list/priority.
            Lower values go first
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.LoadOrderItem.AssemblyFileName">
            <summary>
            The local file name of the assembly.
            Add the folder path if it's in a sub folder too
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader._loadValidAssemblies">
            <summary>
            Collect all assemblies that could have archetypes into _unorderedAssembliesToLoad
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader._loadAllBuildableTypes">
            <summary>
            Get all types that this loader knows how to build from the loaded assemblies.
            Sets _assemblyTypesToBuild
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader._validateAssemblyCollectionExists(Meep.Tech.Collections.Generic.OrderedDictionary{System.Reflection.Assembly,Meep.Tech.Data.Configuration.Loader.AssemblyBuildableTypesCollection},System.Reflection.Assembly)">
            <summary>
            Make sure the assembly collection exists for the given assmebly. Add a new one if it doesnt.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Configuration.Loader.AssemblyBuildableTypesCollection">
            <summary>
            Used to hold assembly types to load.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.AssemblyBuildableTypesCollection.Archetypes">
            <summary>
            The archetype types
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.AssemblyBuildableTypesCollection.Models">
            <summary>
            The model types
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.AssemblyBuildableTypesCollection.Components">
            <summary>
            The component types
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.AssemblyBuildableTypesCollection.Enumerations">
            <summary>
            The enumeration properties
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.AssemblyBuildableTypesCollection.Modifications">
            <summary>
            The single modification class allowed per assembly.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.AssemblyBuildableTypesCollection.Assembly">
            <summary>
            The assembly these types are from
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader.AssemblyBuildableTypesCollection.#ctor(System.Reflection.Assembly)">
            <summary>
            Used to make a new buildable type collection.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader._constructArchetypeFromSystemType(System.Type,System.Int32)">
            <summary>
            Try to construct the archetype, which will register it with it's collections:
            TODO: change this so if we are missing a dependency archetype, then this tries to load that one by name, and then adds +1 to a depth parameter (default 0) on this function.
            Maybe this could be done more smoothly by pre-emptively registering all ids?
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader._testBuildModelsForAllInitializedTypes">
            <summary>
            Try to build a test model for each archetype, and throw if it fails
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader._tryToPreInitializeSimpleModel(System.Type,System.Exception@)">
            <summary>
            Try to initialize a model type.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader._tryToInitializeModel(System.Type,System.Exception@)">
            <summary>
            Try to initialize a model type.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader._registerModelType(System.Type)">
            <summary>sd
            Register a new type of model.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader._tryToInitializeComponent(System.Type,System.Exception@)">
            <summary>
            Try to initialize a component type.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader._registerComponentType(System.Type)">
            <summary>
            Register types of components
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader._applyModificationsToAllTypesByAssemblyLoadOrder(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Call all the the Archetype.Modifier.Initialize() functions in mod load order.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader.GetOrBuildTestModel(System.Type,Meep.Tech.Data.Universe)">
            <summary>
            A function that can be used to test build models.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader.GetOrBuildTestModel(Meep.Tech.Data.Archetype,System.Type)">
            <summary>
            A function that can be used to test build models.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader._testBuildDefaultModel(System.Type)">
            <summary>
            Test build a model of the given type using it's default archetype or builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader._testBuildDefaultComponent(System.Type)">
            <summary>
            Test build a model of the given type using it's default archetype or builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader._tryToCompleteAllEnumsInitialization">
            <summary>
            Try to initialize any archetypes that failed:
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader._tryToCompleteAllComponentsInitialization">
            <summary>
            Try to initialize any archetypes that failed:
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader._tryToCompleteAllModelsInitialization">
            <summary>
            Try to initialize any archetypes that failed:
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader._tryToCompleteAllArchetypesInitialization">
            <summary>
            Try to initialize any archetypes that failed:
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader._tryToFinishAllInitalizedTypes">
            <summary>
            Try to finish all remaining initialized archetypes:
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader._finalize">
            <summary>
            Finish initialization
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Configuration.Loader.Failure">
            <summary>
            Represents a failed type that wasn't loaded during XBAM initialization
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.Failure.XbamType">
            <summary>
            The XBam Type of the failure.
            Buit in options are: Archetype, Model, Enumeration and Component.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.Failure.SystemType">
            <summary>
            The system type of the failed type
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.Failure.Exception">
            <summary>
            The exception that was thrown.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.Failure.Metadata">
            <summary>
            Other extra metadata about the failure.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader.Failure.#ctor(System.String,System.Type,System.Exception)">
            <summary>
            Make a new failure for reporting.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader.Failure.ToString">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Loader._getFirstDeclaringParent(System.Type)">
            <summary>
            Go up the tree and find a declaring type that these types inherit from.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Configuration.Loader.FailedToConfigureTypeException">
            <summary>
            Exeption thrown when you fail to initialize or finalize a type. This will cause the loader to retry for things like missing dependencies that haven't loaded yet:
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Configuration.Loader.FailedToConfigureNewArchetypeException">
            <summary>
            Exeption thrown when you fail to initialize or finalize an archetype. This will cause the loader to retry for things like missing dependencies that haven't loaded yet:
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Configuration.Loader.FailedToConfigureNewModelException">
            <summary>
            Exeption thrown when you fail to initialize or finalize a model. This will cause the loader to retry for things like missing dependencies that haven't loaded yet:
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Configuration.Loader.FailedToConfigureNewComponentException">
            <summary>
            Exeption thrown when you fail to initialize or finalize a component. This will cause the loader to retry for things like missing dependencies that haven't loaded yet:
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Configuration.Loader.MissingArchetypeDependencyException">
            <summary>
            Exeption thrown when you fail to initialize an archetype because another archetype is missing. This will cause the loader to retry for things like missing dependencies that haven't loaded yet:
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Configuration.Loader.CannotInitializeTypeException">
            <summary>
            Exeption thrown when you cannot to initialize a type. This will cause the loader to stop trying for this archetype and mark it as failed completely:
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Configuration.Loader.CannotInitializeArchetypeException">
            <summary>
            Exeption thrown when you cannot to initialize an archetype. This will cause the loader to stop trying for this archetype and mark it as failed completely.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Configuration.Loader.CannotInitializeModelException">
            <summary>
            Exeption thrown when you cannot to initialize a model type.  This will cause the loader to stop trying for this model and mark it as failed completely.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Configuration.Loader.CannotInitializeComponentException">
            <summary>
            Exeption thrown when you cannot to initialize a component type.  This will cause the loader to stop trying for this component and mark it as failed completely.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Configuration.Loader.MissingComponentDependencyForArchetypeException">
            <summary>
            Exeption thrown when a component is missing
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Configuration.Loader.MissingDependencyForArchetypeException">
            <summary>
            Exeption thrown when a dependency for an archetype is missing
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Configuration.Loader.MissingDependencyForModelException">
            <summary>
            Exeption thrown when a dependency for a model is missing
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Configuration.Loader.MissingDependencyForComponentException">
            <summary>
            Exeption thrown when a dependency for a component is missing
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Configuration.Loader.MissingDependencyException">
            <summary>
            Exeption thrown when a dependency for a type is missing
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Configuration.Loader.Settings">
            <summary>
            Settings for the loader
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.Settings.PreLoadAssemblies">
            <summary>
            Assemblies that should be included in the loading that are built in.
            This helps prevent assemblies from not being loaded yet on initial searches
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.Settings.IgnoredAssemblies">
            <summary>
            Assemblies that should be ignored in the loading 
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.Settings.FatalOnCannotInitializeType">
            <summary>
            If a single archetype not being initialized should throw a fatal.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.Settings.FatalDuringFinalizationOnCouldNotInitializeTypes">
            <summary>
            If any archetypes not being initialized by the time we get to finalize should throw a fatal.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.Settings.ArchetypeAssembliesPrefix">
            <summary>
            The prefix to limit assemblies to for loading archetypes
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.Settings.AssemblyPrefixesToIgnore">
            <summary>
            The assembly name prefixes to ignore when loading types from assemblies
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.Settings.InitializationAttempts">
            <summary>
            How many times to re-run initialization to account for types that require others
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.Settings.ModelTestBuildAttempts">
            <summary>
            How many times to re-run models that failed to be test built to account for types that require others
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.Settings.FinalizationAttempts">
            <summary>
            How many times to attempt to run finalization on remaining initializing types
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.Settings.AllowRuntimeTypeRegistrations">
            <summary>
            Overrideable bool to allow runtime registrations of types that set AllowSubtypeRuntimeRegistrations to true.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.Settings.PreLoadAllReferencedAssemblies">
            <summary>
            If true (is true by default), this tells the loader to pre-load all assemblies referenced by the one currently running the loader.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.Settings.DataFolderParentFolderLocation">
            <summary>
            The folder containing the /data/ folder.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.Settings.UniverseName">
            <summary>
            The name to configure for the current universe.
            This will be used as it's unique key in the db
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.Settings.PreOrderedAssemblyFiles">
            <summary>
            A pre-settable setting for specifying how to order certain mods for loading.
            This will throw if there's a conflict with order.json
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.Settings.ModelSerializerOptions">
            <summary>
            The default model serializer options
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Configuration.Loader.Settings.DoNotBuildInInitialLoadAttribute">
            <summary>
            Prevents a type that inherits from Archetype or IModel from being built as an archetype during initial loading. this is NOT inherited.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.Settings.DoNotBuildInInitialLoadAttribute.TraitName">
            <summary><inheritdoc/></summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.Settings.DoNotBuildInInitialLoadAttribute.TraitDescription">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Meep.Tech.Data.Configuration.Loader.Settings.DoNotBuildThisOrChildrenInInitialLoadAttribute">
            <summary>
            Prevents a type that inherits from Archetype or IModel and it's inherited types from being built into an archetype during initial loading.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.Settings.DoNotBuildThisOrChildrenInInitialLoadAttribute.TraitName">
            <summary><inheritdoc/></summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Loader.Settings.DoNotBuildThisOrChildrenInInitialLoadAttribute.TraitDescription">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Meep.Tech.Data.Configuration.DependencyAttribute">
            <summary>
            Used to prevent this type of Model, Archetype or Component from being loaded by the Loader until all of the dependent types are successfully loaded first.   
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.DependencyAttribute.DependentOnType">
            <summary>
            The type this is dependent on
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.DependencyAttribute.#ctor(System.Type)">
            <summary>
            Add a new dependency to this type.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.LoaderConfigurationExtensions.UpdateJsonSerializationSettings(Newtonsoft.Json.JsonSerializerSettings,Meep.Tech.Data.Universe,System.Boolean,System.Collections.Generic.IEnumerable{Newtonsoft.Json.JsonConverter})">
            <summary>
            Update json serialization settings to include xbam settings.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Configuration.Modifications">
            <summary>
            Can be used to modify existing Archetypes who have components open to external edits 
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Modifications.Universe">
            <summary>
            The universe this is modifiying
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Modifications.#ctor(Meep.Tech.Data.Universe)">
            <summary>
            Base Ctor, override and keep hidden.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.Modifications.Dependencies">
            <summary>
            (Optional) ECSBAM Assemblies this one depends on.
            TOOD: impliment for this, and for archetypes.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Modifications.Initialize">
            <summary>
            This is called after all Archetypes are loaded in their base form from their libaries initially; in mod load order.
            These modifications will then run afterwards. also in mod load order.
            This is called before finalize is called on all archetypes.
            You can access universe data though this.Universe
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Modifications.AddAfterInitialzation(Meep.Tech.Data.Archetype.IComponent,Meep.Tech.Data.Archetype[])">
            <summary>
            Add the given component to the given archetypes After Archetype Loading and Initialization.
            These are added after inital components are added, any components are removed, and before any components are updated
            These are called before FinishInitialization on the archetype.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Modifications.AddAfterInitialzation(System.Collections.Generic.IEnumerable{Meep.Tech.Data.Archetype},Meep.Tech.Data.Archetype.IComponent[])">
            <summary>
            Add the given components to the given archetypes After Archetype Loading and Initialization.
            These are added after inital components are added, any components are removed, and before any components are updated
            These are called before FinishInitialization on the archetype.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Modifications.RemoveAfterInitialzation``1(Meep.Tech.Data.Archetype[])">
            <summary>
            Remove the given component from the given archetypes After Archetype Loading and Initialization.
            These are removed after inital components are added, and before any extra components added or updated
            These are called before FinishInitialization on the archetype.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Modifications.RemoveAfterInitialzation(System.String,Meep.Tech.Data.Archetype[])">
            <summary>
            Remove the given component from the given archetypes After Archetype Loading and Initialization.
            These are removed after inital components are added, and before any extra components added or updated
            These are called before FinishInitialization on the archetype.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Modifications.RemoveAfterInitialzation(System.Collections.Generic.IEnumerable{Meep.Tech.Data.Archetype},System.String[])">
            <summary>
            Remove the given components from the given archetypes After Archetype Loading and Initialization.
            These are removed after inital components are added, and before any extra components added or updated
            These are called before FinishInitialization on the archetype.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Modifications.UpdateAfterInitialzation``1(System.Func{``0,``0},Meep.Tech.Data.Archetype[])">
            <summary>
            Update the given component in the given archetypes After Archetype Loading and Initialization, if they exist.
            These are updated after inital components are added, extra components added, any components are removed, but before UpdateOrAddAfterInitialzation
            These are called before FinishInitialization on the archetype.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.Modifications.AddOrUpdateAfterInitialzation(System.Collections.Generic.IEnumerable{Meep.Tech.Data.Archetype},Meep.Tech.Data.Archetype.IComponent[])">
            <summary>
            Remove the given component from the given archetypes After Archetype Loading and Initialization.
            This is called after inital components are added, extra components added, any components are removed, and existing components are updated
            ... it should be last before FinishInitialization on the archetype.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Configuration.GenericTestArgumentAttribute">
            <summary>
            Used to test models and archetypes that have Generic arguments.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Configuration.ConsoleProgressLogger">
            <summary>
            Used to set up debugging and progress loading bars for xbam.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.ConsoleProgressLogger.VerboseModeForErrors">
            <summary>
            Tells this to print full errors inline
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.ConsoleProgressLogger.VerboseModeForNonErrors">
            <summary>
            Tells this to print non error messages more verbosely
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.ConsoleProgressLogger.OverallPercentComplete">
            <summary>
            The overall completeness of the whole loader program
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.ConsoleProgressLogger.CurrentSubProcessName">
            <summary>
            The current sub process of the loader
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.ConsoleProgressLogger.CurrentSubProcessPercentComplete">
            <summary>
            The current completeness of the current sub process
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Configuration.ConsoleProgressLogger.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Make a special logger for the loader.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Configuration.ITrait`1">
            <summary>
            Used to identify an interface as an Xbam Trait
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.ITrait`1.TraitName">
            <summary>
            The name of this type of trait
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Configuration.ITrait`1.TraitDescription">
            <summary>
            The desription of this type of trait
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.ArchetypePublicFullMakers">
            <summary>
            Public make extensions for archeytpes that implement Archetype.IExposePublicMakers.Fully
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicFullMakers.DefaultModelBuilders``2(Meep.Tech.Data.Archetype{``0,``1}.IExposeDefaultModelBuilderMakeMethods.Fully)">
            <summary>
            Exposes the interface for any public model builder Make functions for this archetype.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicFullMakers.Make``2(Meep.Tech.Data.Archetype{``0,``1}.IExposeDefaultModelBuilderMakeMethods.Fully)">
            <summary>
            Make a default model from this Archetype
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicFullMakers.Make``3(Meep.Tech.Data.Archetype{``1,``2}.IExposeDefaultModelBuilderMakeMethods.Fully)">
            <summary>
            Make a default model from this Archetype of the desired sub-type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicFullMakers.Make``3(Meep.Tech.Data.Archetype{``1,``2}.IExposeDefaultModelBuilderMakeMethods.Fully,``0@)">
            <summary>
            Make a default model from this Archetype of the desired sub-type.
            This returns the same value passed to the out parameter, this is mainly just here to help you avoid entering all 3 generic types when you want to use Make in a simple way.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.ArchetypePublicBuilderMakers">
            <summary>
            Public make extensions for archeytpes that implement Archetype.IExposePublicMakers.WithBuilderParameters or ..Fully
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicBuilderMakers.DefaultModelBuilders``2(Meep.Tech.Data.Archetype{``0,``1}.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters)">
            <summary>
            Gets the exposed model builder Make functions for this archetype.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicBuilderMakers.Make``2(Meep.Tech.Data.Archetype{``0,``1}.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters)">
            <summary>
            Make a default model from this Archetype
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicBuilderMakers.Make``3(Meep.Tech.Data.Archetype{``1,``2}.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters)">
            <summary>
            Make a default model from this Archetype of the desired sub-type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicBuilderMakers.Make``3(Meep.Tech.Data.Archetype{``1,``2}.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters,``0@)">
            <summary>
            Make a default model from this Archetype of the desired sub-type.
            This returns the same value passed to the out parameter, this is mainly just here to help you avoid entering all 3 generic types when you want to use Make in a simple way.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicBuilderMakers.Make``2(Meep.Tech.Data.Archetype{``0,``1}.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters,System.Func{Meep.Tech.Data.IBuilder{``0},Meep.Tech.Data.IBuilder{``0}})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicBuilderMakers.Make``3(Meep.Tech.Data.Archetype{``1,``2}.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters,System.Func{Meep.Tech.Data.IBuilder{``1},Meep.Tech.Data.IBuilder{``1}})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicBuilderMakers.Make``3(Meep.Tech.Data.Archetype{``1,``2}.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters,``0@,System.Func{Meep.Tech.Data.IBuilder{``1},Meep.Tech.Data.IBuilder{``1}})">
            <summary>
            Make a default model from this Archetype of the desired sub-type.
            This returns the same value passed to the out parameter, this is mainly just here to help you avoid entering all 3 generic types when you want to use Make in a simple way.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicBuilderMakers.Make``2(Meep.Tech.Data.Archetype{``0,``1}.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters,System.Action{Meep.Tech.Data.IModel.Builder})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicBuilderMakers.Make``3(Meep.Tech.Data.Archetype{``1,``2}.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters,System.Action{Meep.Tech.Data.IModel.Builder})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicBuilderMakers.Make``3(Meep.Tech.Data.Archetype{``1,``2}.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters,``0@,System.Action{Meep.Tech.Data.IModel.Builder})">
            <summary>
            Make a model by and configuring the default builder.
            This returns the same value passed to the out parameter, this is mainly just here to help you avoid entering all 3 generic types when you want to use Make in a simple way.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicBuilderMakers.Make``2(Meep.Tech.Data.Archetype{``0,``1}.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters,System.Action{Meep.Tech.Data.IModel{``0}.Builder})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicBuilderMakers.Make``3(Meep.Tech.Data.Archetype{``1,``2}.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters,System.Action{Meep.Tech.Data.IModel{``1}.Builder})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicBuilderMakers.Make``3(Meep.Tech.Data.Archetype{``1,``2}.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters,``0@,System.Action{Meep.Tech.Data.IModel{``1}.Builder})">
            <summary>
            Make a model by and configuring the default builder.
            This returns the same value passed to the out parameter, this is mainly just here to help you avoid entering all 3 generic types when you want to use Make in a simple way.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicBuilderMakers.Make``2(Meep.Tech.Data.Archetype{``0,``1}.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters,System.Func{Meep.Tech.Data.IBuilder,Meep.Tech.Data.IBuilder})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicBuilderMakers.Make``3(Meep.Tech.Data.Archetype{``1,``2}.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters,System.Func{Meep.Tech.Data.IBuilder,Meep.Tech.Data.IBuilder})">
            <summary>
            Make a model by and configuring the default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicBuilderMakers.Make``3(Meep.Tech.Data.Archetype{``1,``2}.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters,``0@,System.Func{Meep.Tech.Data.IBuilder,Meep.Tech.Data.IBuilder})">
            <summary>
            Make a model by and configuring the default builder.
            This returns the same value passed to the out parameter, this is mainly just here to help you avoid entering all 3 generic types when you want to use Make in a simple way.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicBuilderMakers.Make``2(Meep.Tech.Data.Archetype{``0,``1}.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters,System.Func{Meep.Tech.Data.IModel{``0}.Builder,Meep.Tech.Data.IModel{``0}.Builder})">
            <summary>
            Make a model from this archetype by passing down and updating a default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicBuilderMakers.Make``3(Meep.Tech.Data.Archetype{``0,``1}.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters,System.Func{Meep.Tech.Data.IModel{``0}.Builder,Meep.Tech.Data.IModel{``0}.Builder})">
            <summary>
            Make a model from this archetype by passing down and updating a default builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicBuilderMakers.Make``3(Meep.Tech.Data.Archetype{``0,``1}.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters,``2@,System.Func{Meep.Tech.Data.IModel{``0}.Builder,Meep.Tech.Data.IModel{``0}.Builder})">
            <summary>
            Make a model from this archetype by passing down and updating a default builder.
            This returns the same value passed to the out parameter, this is mainly just here to help you avoid entering all 3 generic types when you want to use Make in a simple way.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicBuilderMakers.Make``2(Meep.Tech.Data.Archetype{``0,``1}.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters,Meep.Tech.Data.IModel{``0}.Builder)">
            <summary>
            Make a model from this archetype using a fully qualified builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicBuilderMakers.Make``3(Meep.Tech.Data.Archetype{``1,``2}.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters,Meep.Tech.Data.IModel{``1}.Builder)">
            <summary>
            Make a model from this archetype using a fully qualified builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicBuilderMakers.Make``3(Meep.Tech.Data.Archetype{``1,``2}.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters,``0@,Meep.Tech.Data.IModel{``1}.Builder)">
            <summary>
            Make a model from this archetype using a fully qualified builder.
            This returns the same value passed to the out parameter, this is mainly just here to help you avoid entering all 3 generic types when you want to use Make in a simple way.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicBuilderMakers.Make``2(Meep.Tech.Data.Archetype{``0,``1}.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters,Meep.Tech.Data.IBuilder{``0})">
            <summary>
            Make a model from this archetype using a fully qualified builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicBuilderMakers.Make``2(Meep.Tech.Data.Archetype{``0,``1}.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters,Meep.Tech.Data.IBuilder)">
            <summary>
            Make a model from this archetype using a  builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicBuilderMakers.Make``3(Meep.Tech.Data.Archetype{``1,``2}.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters,Meep.Tech.Data.IBuilder{``1})">
            <summary>
            Make a model from this archetype using a fully qualified builder.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicBuilderMakers.Make``3(Meep.Tech.Data.Archetype{``1,``2}.IExposeDefaultModelBuilderMakeMethods.WithBuilderParameters,``0@,Meep.Tech.Data.IBuilder{``1})">
            <summary>
            Make a model from this archetype using a fully qualified builder.
            This returns the same value passed to the out parameter, this is mainly just here to help you avoid entering all 3 generic types when you want to use Make in a simple way.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.ArchetypePublicParameterListMakers">
            <summary>
            Public make extensions for archeytpes that implement Archetype.IExposePublicMakers.WithParamListParameters or ..Fully
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicParameterListMakers.DefaultModelBuilders``2(Meep.Tech.Data.Archetype{``0,``1}.IExposeDefaultModelBuilderMakeMethods.WithParamListParameters)">
            <summary>
            Gets the exposed model builder Make functions for this archetype.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicParameterListMakers.Make``2(Meep.Tech.Data.Archetype{``0,``1}.IExposeDefaultModelBuilderMakeMethods.WithParamListParameters,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Helper for potentially making an item without initializing a Builder object.
            This does by default for models.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicParameterListMakers.Make``3(Meep.Tech.Data.Archetype{``1,``2}.IExposeDefaultModelBuilderMakeMethods.WithParamListParameters,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Helper for potentially making an item without initializing a dictionary object
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicParameterListMakers.Make``3(Meep.Tech.Data.Archetype{``1,``2}.IExposeDefaultModelBuilderMakeMethods.WithParamListParameters,``0@,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Helper for potentially making an item without initializing a dictionary object
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicParameterListMakers.Make``2(Meep.Tech.Data.Archetype{``0,``1}.IExposeDefaultModelBuilderMakeMethods.WithParamListParameters,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.Object}})">
            <summary>
            Helper for potentially making an item without initializing a Builder object.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicParameterListMakers.Make``3(Meep.Tech.Data.Archetype{``1,``2}.IExposeDefaultModelBuilderMakeMethods.WithParamListParameters,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.Object}})">
            <summary>
            Helper for potentially making an item without initializing a Builder object.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicParameterListMakers.Make``3(Meep.Tech.Data.Archetype{``1,``2}.IExposeDefaultModelBuilderMakeMethods.WithParamListParameters,``0@,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.Object}})">
            <summary>
            Helper for potentially making an item without initializing a Builder object.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicParameterListMakers.Make``2(Meep.Tech.Data.Archetype{``0,``1}.IExposeDefaultModelBuilderMakeMethods.WithParamListParameters,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Helper for potentially making an item without initializing a Builder object.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicParameterListMakers.Make``3(Meep.Tech.Data.Archetype{``1,``2}.IExposeDefaultModelBuilderMakeMethods.WithParamListParameters,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Helper for potentially making an item without initializing a Builder object.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicParameterListMakers.Make``3(Meep.Tech.Data.Archetype{``1,``2}.IExposeDefaultModelBuilderMakeMethods.WithParamListParameters,``0@,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Helper for potentially making an item without initializing a Builder object.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicParameterListMakers.Make``2(Meep.Tech.Data.Archetype{``0,``1}.IExposeDefaultModelBuilderMakeMethods.WithParamListParameters,System.Collections.Generic.IEnumerable{System.ValueTuple{Meep.Tech.Data.IModel.Builder.Param,System.Object}})">
            <summary>
            Helper for potentially making an item without initializing a Builder object.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicParameterListMakers.Make``3(Meep.Tech.Data.Archetype{``1,``2}.IExposeDefaultModelBuilderMakeMethods.WithParamListParameters,System.Collections.Generic.IEnumerable{System.ValueTuple{Meep.Tech.Data.IModel.Builder.Param,System.Object}})">
            <summary>
            Helper for potentially making an item without initializing a Builder object.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicParameterListMakers.Make``3(Meep.Tech.Data.Archetype{``1,``2}.IExposeDefaultModelBuilderMakeMethods.WithParamListParameters,``0@,System.Collections.Generic.IEnumerable{System.ValueTuple{Meep.Tech.Data.IModel.Builder.Param,System.Object}})">
            <summary>
            Helper for potentially making an item without initializing a Builder object.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicParameterListMakers.Make``2(Meep.Tech.Data.Archetype{``0,``1}.IExposeDefaultModelBuilderMakeMethods.WithParamListParameters,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Meep.Tech.Data.IModel.Builder.Param,System.Object}})">
            <summary>
            Helper for potentially making an item without initializing a Builder object.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicParameterListMakers.Make``3(Meep.Tech.Data.Archetype{``1,``2}.IExposeDefaultModelBuilderMakeMethods.WithParamListParameters,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Meep.Tech.Data.IModel.Builder.Param,System.Object}})">
            <summary>
            Helper for potentially making an item without initializing a Builder object.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ArchetypePublicParameterListMakers.Make``3(Meep.Tech.Data.Archetype{``1,``2}.IExposeDefaultModelBuilderMakeMethods.WithParamListParameters,``0@,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Meep.Tech.Data.IModel.Builder.Param,System.Object}})">
            <summary>
            Helper for potentially making an item without initializing a Builder object.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.SplayedArchetypedExtensions">
            <summary>
            Extensions for types that extend Archetype.IBuildOneForEach[TArchetypeBase, TEnumeration] 
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.SplayedArchetypedExtensions.SplayOn``2(``0,``1)">
            <summary>
            Get the specific sub-Archetype for an enum value.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.BranchAttribute">
            <summary>
            Used as shorthand for an archetype that produces a different model via the Model constructor
            This will just set the model constructor of the archetype to the basic activator for the parameterless ctor of TNewBaseModel, or the declaring type of the current type.     
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.BranchAttribute.NewBaseModelType">
            <summary>
            The new base model this archetype branches for
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.ComponentExtensions">
            <summary>
            Serialization Related Component Extensions
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ComponentExtensions.ToJson(Meep.Tech.Data.IComponent)">
            <summary>
            Turn the model into a serialized data object.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ComponentExtensions.ToJson(Meep.Tech.Data.IComponent,Meep.Tech.Data.Universe)">
            <summary>
            Turn the model into a serialized data object.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ComponentExtensions.GetKey(Meep.Tech.Data.IComponent)">
            <summary>
            Helper function to fetch the key for this component type
            A key used to index this type of component. There can only be one componet per key on a model or archetype
            The Key is the Component Base Type (the type that inherits initially from one of the IComponent interfaces)
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IReadableComponentStorage">
            <summary>
            This represents an object with some kind of component storage.
            To override component get logic on objects, you must override them implicitly via IReadableComponentStorage
            Overriding in the object itself without using implicits may not change the logic everywhere that's needed, 
            ... only do that if you want to add logic and use the base functionality too.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IReadableComponentStorage.ComponentsByBuilderKey">
            <summary>
            Internal holder for components data
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IReadableComponentStorage.ComponentsWithWaitingContracts">
            <summary>
            Internal holder for components data
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IReadableComponentStorage.Equals(Meep.Tech.Data.IReadableComponentStorage,Meep.Tech.Data.IReadableComponentStorage)">
            <summary>
            Equality Logic
            TODO: impliment this in the WithComponents models
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IReadableComponentStorage.GetComponent(System.String)">
            <summary>
            Get a component if this has a component of that given type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IReadableComponentStorage.HasComponent(System.String)">
            <summary>
            Check if this has a component matching the given object.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IReadableComponentStorage.TryToGetComponent(System.String,Meep.Tech.Data.IComponent@)">
            <summary>
            Get a component if this has that given component
            Overriding this overrides Get component and all other Has component functionalities
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IReadableComponentStorage.TryToGetComponent(System.Type,Meep.Tech.Data.IComponent@)">
            <summary>
            Get a component if this has a component of that given type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IReadableComponentStorage.TryToGetComponent``1(``0@)">
            <summary>
            Get a component if this has a component of that given type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IReadableComponentStorage.HasComponent(System.Type)">
            <summary>
            Check if this has a given component by base type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IReadableComponentStorage.HasComponent(Meep.Tech.Data.IComponent)">
            <summary>
            Check if this has a component matching the given object
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IReadableComponentStorage.TryToGetComponent(Meep.Tech.Data.IComponent,Meep.Tech.Data.IComponent@)">
            <summary>
            Get a component if this has that given component
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IReadableComponentStorage.ReadOnlyModelComponentCollection">
            <summary>
            Simple container for a collection of components.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IReadableComponentStorage.ReadOnlyModelComponentCollection.Storage">
            <summary>
            The model all the components belong to.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IReadableComponentStorage.ReadOnlyModelComponentCollection.#ctor(Meep.Tech.Data.IModel,System.Collections.Generic.IReadOnlyDictionary{System.String,Meep.Tech.Data.IModel.IComponent})">
            <summary>
            Make a ReadOnlyModelComponentCollection for a parent storage model.
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.IReadableComponentStorage.ReadOnlyModelComponentCollection._entries">
            <summary><inheritdoc/></summary>
        </member>
        <member name="P:Meep.Tech.Data.IReadableComponentStorage.ReadOnlyModelComponentCollection.Item(System.String)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="P:Meep.Tech.Data.IReadableComponentStorage.ReadOnlyModelComponentCollection.Keys">
            <summary><inheritdoc/></summary>
        </member>
        <member name="P:Meep.Tech.Data.IReadableComponentStorage.ReadOnlyModelComponentCollection.Values">
            <summary><inheritdoc/></summary>
        </member>
        <member name="P:Meep.Tech.Data.IReadableComponentStorage.ReadOnlyModelComponentCollection.Count">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Data.IReadableComponentStorage.ReadOnlyModelComponentCollection.ContainsKey(System.String)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Data.IReadableComponentStorage.ReadOnlyModelComponentCollection.GetEnumerator">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Data.IReadableComponentStorage.ReadOnlyModelComponentCollection.TryGetValue(System.String,Meep.Tech.Data.IModel.IComponent@)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Data.IReadableComponentStorage.ReadOnlyModelComponentCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Meep.Tech.Data.IReadableComponentStorage.ComponentsToJsonConverter">
            <summary>
            Used to convert a collection of components to and from a json array
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IWriteableComponentStorage">
            <summary>
            This represens an object with component storage that you can write to without restrictions.
            Adding this to an object will give you unrestricted access to write to it's components
            These logics can't be replaced on objecs like models.
            If you want to add logic, you can instead override the virtual model function and use the base function logic.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ReadableComponentStorageExtensions.GetComponent(Meep.Tech.Data.IReadableComponentStorage,System.String)">
            <summary>
            Get a component if this has a component of that given type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ReadableComponentStorageExtensions.GetComponent``1(Meep.Tech.Data.IReadableComponentStorage)">
            <summary>
            Get a component if this has a component of that given type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ReadableComponentStorageExtensions.HasComponent(Meep.Tech.Data.IReadableComponentStorage,System.String)">
            <summary>
            Check if this has a component matching the given object.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ReadableComponentStorageExtensions.TryToGetComponent(Meep.Tech.Data.IReadableComponentStorage,System.String,Meep.Tech.Data.IComponent@)">
            <summary>
            Get a component if this has that given component
            Overriding this overrides Get component and all other Has component functionalities
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ReadableComponentStorageExtensions.TryToGetComponent(Meep.Tech.Data.IReadableComponentStorage,System.Type,Meep.Tech.Data.IComponent@)">
            <summary>
            Get a component if this has a component of that given type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ReadableComponentStorageExtensions.TryToGetComponent``1(Meep.Tech.Data.IReadableComponentStorage,``0@)">
            <summary>
            Get a component if this has a component of that given type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ReadableComponentStorageExtensions.HasComponent``1(Meep.Tech.Data.IReadableComponentStorage)">
            <summary>
            Get a component if this has a component of that given type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ReadableComponentStorageExtensions.HasComponent(Meep.Tech.Data.IReadableComponentStorage,System.Type)">
            <summary>
            Check if this has a given component by base type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ReadableComponentStorageExtensions.HasComponent(Meep.Tech.Data.IReadableComponentStorage,Meep.Tech.Data.IComponent)">
            <summary>
            Check if this has a component matching the given object
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ReadableComponentStorageExtensions.TryToGetComponent(Meep.Tech.Data.IReadableComponentStorage,Meep.Tech.Data.IComponent,Meep.Tech.Data.IComponent@)">
            <summary>
            Get a component if this has that given component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ReadableComponentStorageExtensions.AddComponent(Meep.Tech.Data.IReadableComponentStorage,Meep.Tech.Data.IComponent)">
            <summary>
            Add a component, if it doesn't exist. Otherwise this throws.
            This is for internal use only
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ReadableComponentStorageExtensions._updateComponentUniverse(Meep.Tech.Data.IReadableComponentStorage,Meep.Tech.Data.IComponent)">
            <summary>
            Update a component's universe to a new owner
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ReadableComponentStorageExtensions.AddOrUpdateComponent(Meep.Tech.Data.IReadableComponentStorage,Meep.Tech.Data.IComponent)">
            <summary>
            Add a component, updating the existing value if a component of this type already exists.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ReadableComponentStorageExtensions.UpdateComponent(Meep.Tech.Data.IReadableComponentStorage,Meep.Tech.Data.IComponent)">
            <summary>
            Add a component, if it doesn't exist. Otherwise this throws.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ReadableComponentStorageExtensions.UpdateComponent``1(Meep.Tech.Data.IReadableComponentStorage,System.Func{``0,``0})">
            <summary>
            Add a component, if it doesn't exist. Otherwise this throws.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ReadableComponentStorageExtensions.RemoveComponent``1(Meep.Tech.Data.IReadableComponentStorage)">
            <summary>
            Remove an existing component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ReadableComponentStorageExtensions.RemoveComponent``1(Meep.Tech.Data.IReadableComponentStorage,Meep.Tech.Data.IComponent@)">
            <summary>
            Remove an existing component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ReadableComponentStorageExtensions.RemoveComponent(Meep.Tech.Data.IReadableComponentStorage,System.Type)">
            <summary>
            Remove an existing component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ReadableComponentStorageExtensions.RemoveComponent(Meep.Tech.Data.IReadableComponentStorage,System.Type,Meep.Tech.Data.IComponent@)">
            <summary>
            Remove an existing component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ReadableComponentStorageExtensions.RemoveComponent(Meep.Tech.Data.IReadableComponentStorage,Meep.Tech.Data.IComponent)">
            <summary>
            Remove an existing component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ReadableComponentStorageExtensions.RemoveComponent(Meep.Tech.Data.IReadableComponentStorage,System.String,Meep.Tech.Data.IComponent@)">
            <summary>
            Basic remove component logic.
            This should be the only one you need to override for all removal logic
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ReadableComponentStorageExtensions.RemoveComponent(Meep.Tech.Data.IReadableComponentStorage,System.String)">
            <summary>
            Basic remove component logic
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.WriteableComponentStorageExtensions.AddComponent(Meep.Tech.Data.IWriteableComponentStorage,Meep.Tech.Data.IComponent)">
            <summary>
            Add a component, if it doesn't exist. Otherwise this throws.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.WriteableComponentStorageExtensions.AddOrUpdateComponent(Meep.Tech.Data.IWriteableComponentStorage,Meep.Tech.Data.IComponent)">
            <summary>
            Add a component, updating the existing value if a component of this type already exists.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.WriteableComponentStorageExtensions.UpdateComponent(Meep.Tech.Data.IWriteableComponentStorage,Meep.Tech.Data.IComponent)">
            <summary>
            Add a component, if it doesn't exist. Otherwise this throws.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.WriteableComponentStorageExtensions.UpdateComponent``1(Meep.Tech.Data.IWriteableComponentStorage,System.Func{``0,``0})">
            <summary>
            Add a component, if it doesn't exist. Otherwise this throws.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.WriteableComponentStorageExtensions.RemoveComponent(Meep.Tech.Data.IWriteableComponentStorage,Meep.Tech.Data.IComponent)">
            <summary>
            Basic remove component logic
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.WriteableComponentStorageExtensions.RemoveComponent(Meep.Tech.Data.IWriteableComponentStorage,System.Type)">
            <summary>
            Basic remove component logic
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.WriteableComponentStorageExtensions.RemoveComponent(Meep.Tech.Data.IWriteableComponentStorage,System.Type,Meep.Tech.Data.IComponent@)">
            <summary>
            Basic remove component logic
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.WriteableComponentStorageExtensions.RemoveComponent``1(Meep.Tech.Data.IWriteableComponentStorage)">
            <summary>
            Basic remove component logic
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.WriteableComponentStorageExtensions.RemoveComponent``1(Meep.Tech.Data.IWriteableComponentStorage,Meep.Tech.Data.IComponent@)">
            <summary>
            Basic remove component logic
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.WriteableComponentStorageExtensions.RemoveComponent(Meep.Tech.Data.IWriteableComponentStorage,System.String,Meep.Tech.Data.IComponent@)">
            <summary>
            Basic remove component logic
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.WriteableComponentStorageExtensions.RemoveComponent(Meep.Tech.Data.IWriteableComponentStorage,System.String)">
            <summary>
            Basic remove component logic
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.WriteableComponentStorageExtensions.AddNewComponent``1(Meep.Tech.Data.IWriteableComponentStorage,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.Object}})">
            <summary>
            Add a new component, throws if the component key is taken already
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.WriteableComponentStorageExtensions.AddNewComponent``1(Meep.Tech.Data.IWriteableComponentStorage,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Add a new component, throws if the component key is taken already
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Enumeration">
            <summary>
            Base for a simple Enumerable value
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Enumeration.JsonConverter">
            <summary>
            Json Converter for Enumerations
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Enumeration._currentMaxInternalEnumId">
            <summary>
            The current number of enums. Used for internal indexing.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Enumeration.InternalId">
            <summary>
            The assigned internal id of this archetype. This is only consistend within the current runtime and execution.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Enumeration.ExternalId">
            <summary>
            The perminant and unique external id
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Enumeration.Universe">
            <summary>
            The universe this enum is a part of
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Enumeration.EnumBaseType">
            <summary>
            The base type of this enumeration
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Enumeration.#ctor(System.Object,Meep.Tech.Data.Universe)">
            <summary>
            Make a new enumeration.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Enumeration.UniqueIdCreationLogic(System.Object)">
            <summary>
            Used to make a unique id for an enum from the provided unique value.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Enumeration.DefaltUniqueIdCreationLogic(System.Type,System.Object)">
            <summary>
            Just removes any spaces.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Enumeration.Equals(System.Object)">
            <summary>
            ==
            </summary>
            
        </member>
        <member name="M:Meep.Tech.Data.Enumeration.GetHashCode">
            <summary>
            #
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Model">
            <summary>
            The base class for a mutable data model that can be produced by an Archetype.
            This includes a components system.
            This is the non-generic base class for Utility
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Model.JsonConverter">
            <summary>
            Defalt converter for any type of model.
            This isn't added to the settings by default because the contract resolver handles it.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,Meep.Tech.Data.IModel,System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Data.Model.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,Meep.Tech.Data.IModel,Newtonsoft.Json.JsonSerializer)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Meep.Tech.Data.Model.Serializer">
            <summary>
            Logic and Settings Used To Serialize Models
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Model.Serializer.EnumTypePropertyName">
            <summary>
            The key used for the field containing the type data for an enum
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Model.Serializer.ComponentKeyPropertyName">
            <summary>
            The key used for the field containing the data for the type of component
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Model.Serializer.ComponentValueCollectionPropertyName">
            <summary>
            The key used for the field containing the value collection for a component if it serializes to a colleciton by default
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Model.Serializer.Options">
            <summary>
            The serializer options
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Model.Serializer.JsonSerializer">
            <summary>
            Compiled model serializer from the settings
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model.Serializer.#ctor(Meep.Tech.Data.Model.Serializer.Settings,Meep.Tech.Data.Universe)">
            <summary>
            Make a new serializer for a universe
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Model.Serializer.DefaultContractResolver">
            <summary>
            The default contract resolver class used for json serialization by ECSBAM
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Model.Serializer.DefaultContractResolver.Universe">
            <summary>
            the universe this resolver is for
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model.Serializer.DefaultContractResolver.#ctor(Meep.Tech.Data.Universe)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model.Serializer.DefaultContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model.Serializer.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Model.Serializer.Settings">
            <summary>
            Settings for the Model Serializer
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Model.Serializer.Settings.ConstructJsonSerializerSettings">
            <summary>
            Helper function to set the default json serializer settings for models.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Model.Serializer.Settings.ConfigureJsonSerializerSettings">
            <summary>
            Helper function to configure the json serialization settings for models after it's constructed.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Model.Serializer.Settings.JsonSerializerSettings">
            <summary>
            Compiled model serializer from the settings config function
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Model.Serializer.Settings.DefaultJsonCoverters">
            <summary>
            The default json converters to include
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Model.Serializer.Settings.PropertiesMustOptOutForJsonSerialization">
            <summary>
            If true, properies need to opt out to avoid being serialized into json using JsonIgnore. Even private properties.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Model.Serializer.Settings.DefaultComparisonConfig">
            <summary>
            The default config used to compare model objects
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Model.Serializer.Settings.DefaultCopyMethod">
            <summary>
            The default way models are copied
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model.Serializer.Settings.BuildJsonSerializationSettings(System.Action{Newtonsoft.Json.JsonSerializerSettings},System.Func{Meep.Tech.Data.Model.Serializer.DefaultContractResolver,System.Collections.Generic.IEnumerable{Newtonsoft.Json.JsonConverter},Newtonsoft.Json.JsonSerializerSettings})">
            <summary>
            Can be used to build and configure copies of the built in json serializer settings.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model.Serializer.Settings.DefaultJsonSerializerSettingsConfigurationLogic(Meep.Tech.Data.Model.Serializer.DefaultContractResolver,System.Collections.Generic.IEnumerable{Newtonsoft.Json.JsonConverter})">
            <summary>
            The default logic for ConfigureJsonSerializerSettings
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model.FromJson(Newtonsoft.Json.Linq.JObject,System.Type,Meep.Tech.Data.Universe,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Deserialize a model from json as a Model
            </summary>
            <param name="deserializeToTypeOverride">You can use this to try to make JsonSerialize 
               use a different Type's info for deserialization than the default returned from GetModelTypeProducedBy</param>
        </member>
        <member name="M:Meep.Tech.Data.Model.FromJsonAs``1(Newtonsoft.Json.Linq.JObject,System.Type,Meep.Tech.Data.Universe,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Deserialize a model from json as a Model
            </summary>
            <typeparam name="TModel">The type to cast the produced model to. Not the same as deserializeToTypeOverride</typeparam>
            <param name="deserializeToTypeOverride">You can use this to try to make JsonSerialize 
               use a different Type's info for deserialization than the default returned from GetModelTypeProducedBy</param>
        </member>
        <member name="P:Meep.Tech.Data.Model.Universe">
            <summary>
            The universe this model was made inside of
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model.Equals(System.Object)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Meep.Tech.Data.Enumeration`1">
            <summary>
            Base for a general Enum
            </summary>
            <typeparam name="TEnumBase"></typeparam>
        </member>
        <member name="P:Meep.Tech.Data.Enumeration`1.All">
            <summary>
            Readonly list of all items from the default universe
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Enumeration`1.GetAll(Meep.Tech.Data.Universe)">
            <summary>
            Readonly list of all items from the default or given universe
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Enumeration`1.Get(System.Object,Meep.Tech.Data.Universe)">
            <summary>
            Get the enum of this type with the given id from the default or provided universe
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Enumeration`1.EnumBaseType">
            <summary>
            The base type of this enumeration
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Enumeration`1.#ctor(System.Object,Meep.Tech.Data.Universe)">
            <summary>
            Ctor add to all.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Enumeration`1.UniqueIdCreationLogic(System.Object)">
            <summary>
            Used to make a unique id for an enum from the provided unique value.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Enumeration`1.GetUniqueIdFromBaseObjectKey(System.Object)">
            <summary>
            Used to make a unique id for an enum from the provided unique value.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.ArchetypePropertyAttribute">
            <summary>
            Marks a model property field as the Archetype field.
            Used for serialization methods
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.AutoBuildAttribute">
            <summary>
            An attribute signifying that this field should be auto incluided in the builder constructor for this model.
            <para>Works with DefaultAttribute, RequiredAttribute, and NotNullAttribute</para>
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.AutoBuildAttribute.DefaultValueGetter">
            <summary>
            Gets a default value for an auto-built field on a model given the model being built and the builder.
            </summary>
            <returns>The default value if the parameter isn't supplied by the builder.</returns>
        </member>
        <member name="T:Meep.Tech.Data.AutoBuildAttribute.ValueValidator">
            <summary>
            Validates the final value.
            </summary>
            <param name="validationError">(optional returnable exception)</param>
        </member>
        <member name="T:Meep.Tech.Data.AutoBuildAttribute.ValueGetter">
            <summary>
            A value getter.
            </summary>
            <returns>the gotten value</returns>
        </member>
        <member name="T:Meep.Tech.Data.AutoBuildAttribute.ValueSetter">
            <summary>
            A value setter.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.AutoBuildAttribute.NotNull">
            <summary>
            If this field must not be null before being returned by the auto build step.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.AutoBuildAttribute.IsRequiredAsAParameter">
            <summary>
            If this field's parameter must be provided to the builder
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.AutoBuildAttribute.Getter">
            <summary>
            An overrideable getter
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.AutoBuildAttribute.Validator">
            <summary>
            An overrideable validator
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.AutoBuildAttribute.Setter">
            <summary>
            The setter
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.AutoBuildAttribute.ParameterName">
            <summary>
            Optional override name for the parameter expected by the builder to build this property with.
            Defaults to the name of the property this is attached to.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.AutoBuildAttribute.DefaultArchetypePropertyName">
            <summary>
            The property on the archetype that will be used as a default if no value is provided to the builder.
            This defaults to: "Default" + ParameterName.
            DefaultAttribute will override this default behavior.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.AutoBuildAttribute.DefaultValueGetterDelegateName">
            <summary>
            The name of a DefaultValueGetter delegate field that can be used to set the default value of this property instead of the DefaultArchetypePropertyName
            Defaults to null and uses DefaultArchetypePropertyName instead.
            DefaultAttribute will override this default behavior.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.AutoBuildAttribute.ValueValidatorName">
            <summary>
            The name of the optional value validator.
            This can be a field, property, or funciton that matches the delegate ValueValidator on this same model.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.AutoBuildAttribute.Order">
            <summary>
            The build order. Defaults to 0.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.AutoBuildAttribute.Internal">
            <summary>
            If this is true, this field can NOT be passed in as a parameter by a user or it will throw an exception.
            TODO: impliment this. (this is not yet implemented)
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.AutoBuildAttribute.#ctor">
            <summary>
            Mark a field for auto-inclusion in the default builder ctor
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.AutoBuildAttribute.Exception">
            <summary>
            An exception thrown by the auto-builder.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.AutoBuildAttribute.Exception.ModelTypeBeingBuilt">
            <summary>
            The model type that threw the exepction 
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.AutoBuildAttribute.Exception.#ctor(System.Type,System.String,System.Exception)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Data.AutoBuildAttribute._autoBuildModelProperty(Meep.Tech.Data.IModel,Meep.Tech.Data.IBuilder,System.Reflection.PropertyInfo,Meep.Tech.Data.AutoBuildAttribute,System.Type)">
            <summary>
            TODO: this needs to be heavily optomized.
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.AutoBuildAttribute.GetDefaultValue">
            <summary>
            The default getter for getting a default value for a field.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.AutoBuildAttribute.BuildDefaultGetterFromBuilderOrDefault(Meep.Tech.Data.IModel,Meep.Tech.Data.IBuilder,System.Reflection.PropertyInfo,Meep.Tech.Data.AutoBuildAttribute,Meep.Tech.Data.AutoBuildAttribute.ValueGetter)">
            <summary>
            Used to build the default ValueGetter for non required items.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.AutoBuildAttribute.BuildDefaultGetterForRequiredValueFromBuilder(Meep.Tech.Data.IModel,Meep.Tech.Data.IBuilder,System.Reflection.PropertyInfo,Meep.Tech.Data.AutoBuildAttribute)">
            <summary>
            Used to build the default ValueGetter for required items.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.ModelComponentsProperty">
            <summary>
            Marks a model property field as the Archetype field.
            Used for serialization methods
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.TestValueBaseAttribute">
            <summary>
            An attribute that adds a value to the DefaultTestParams field of an archetype by default.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.TestValueBaseAttribute.TestId">
            <summary>
            The settable test id.
            TODO: implement multiple tests by id.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.TestValueAttribute">
            <summary>
            An attribute that adds a value to the DefaultTestParams field of an archetype by default.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.TestValueAttribute.Value">
            <summary>
            The value of the attribute
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.TestValueAttribute.#ctor(System.Object)">
            <summary>
            Set the DefaultTestParam value
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Meep.Tech.Data.TestValueIsNull">
            <summary>
            An attribute that uses a null as the DefaultTestParams value for this field.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.TestValueIsNull.#ctor">
            <summary>
            Set the test value of this field to 'new()';
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.TestValueIsNewAttribute">
            <summary>
            An attribute that activates a default object of the type as a the DefaultTestParams value for this field.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.TestValueIsNewAttribute.#ctor">
            <summary>
            Set the test value of this field to 'new()';
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.TestValueIsTestModel">
            <summary>
            An attribute that tells this field to use the already generated test model of another model type as the test value for this field
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.TestValueIsTestModel.TestModelType">
            <summary>
            Can be used to specify a test model type for generic base classes.
            TODO: implement
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.TestValueIsTestModel.#ctor">
            <summary>
            Set the test value of this field to 'new()';
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.GetTestValueFromMemberAttribute">
            <summary>
            An attribute that gets a value from a local member as a the DefaultTestParams value for this field.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.GetTestValueFromMemberAttribute.MethodName">
            <summary>
            The name of the method to use to get the value.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.GetTestValueFromMemberAttribute.#ctor(System.String)">
            <summary>
            Set the test value of this field to 'new()';
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.TestValueIsEmptyEnumerableAttribute">
            <summary>
            An attribute that activates an empty enum of the seired type as a the DefaultTestParams value for this field.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Meep.Tech.Data.TestValueIsEmptyEnumerableAttribute.#ctor" -->
        <member name="T:Meep.Tech.Data.TestParentFactoryAttribute">
            <summary>
            An attribute that tells the testing system in xbam to use an archetype with a dummy parent.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.TestParentFactoryAttribute.TestArchetypeType">
            <summary>
            The parent type to use in tests.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.TestParentFactoryAttribute.#ctor(System.Type)">
            <summary>
            An attribute that tells the testing system in xbam to use a dummy archetype component with a dummy parent.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IBuilder">
            <summary>
            The base interface for builders
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IBuilder.Universe">
            <summary>
            The universe this is being built in
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IBuilder.Archetype">
            <summary>
            The archetype that initialize the building and made the builder
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IBuilder.Parent">
            <summary>
            The parent mode, if this builder was passed down from one. Null if there is no parent
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IBuilder.Parameters">
            <summary>
            The parameters contained in this builder as a list.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IBuilder.ForEachParam(System.Action{System.ValueTuple{System.String,System.Object}})">
            <summary>
            Do something for each param in a builder
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IBuilder.Append(System.String,System.Object)">
            <summary>
            Return a copy of the builder with a new value appended.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IBuilder`1">
            <summary>
            The base interface for builders
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IBuilder`1.InitializeModel">
            <summary>
            used by a builder to initialize it's model.
            Uses IFactory.ModelConstructor(builder): by default.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IBuilder`1.ConfigureModel">
            <summary>
            Used by a builder to configure it's model
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IBuilder`1.FinalizeModel">
            <summary>
            Used by a builder to finalize it's model
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IBuilder`1.Build">
            <summary>
            Execute a builder
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.BuilderExtensions.GetViaParam``1(Meep.Tech.Data.IBuilder,Meep.Tech.Data.IModel.Builder.Param,``0)">
            <summary>
            Fetch a param from a collection, or the default if it's not provided, or the provided is a nullable and null is provided
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.BuilderExtensions.TryToGetViaParam``1(Meep.Tech.Data.IBuilder,Meep.Tech.Data.IModel.Builder.Param,``0@,``0)">
            <summary>
            Fetch a param from a collection, or the default if it's not provided, or the provided is a nullable and null is provided
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.BuilderExtensions.GetAndValidateViaParamAs``1(Meep.Tech.Data.IBuilder,Meep.Tech.Data.IModel.Builder.Param)">
            <summary>
            Fetch a param from a collection. The param cannot be left out, and no defaults will be replaced.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.BuilderExtensions.SetViaParam``1(Meep.Tech.Data.IBuilder,Meep.Tech.Data.IModel.Builder.Param,``0)">
            <summary>
            Add a default value to the param collection if there isn't one set already
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.BuilderExtensions.SetDefaultValueViaParam``1(Meep.Tech.Data.IBuilder,Meep.Tech.Data.IModel.Builder.Param,``0)">
            <summary>
            Add a default value to the param collection if there isn't one set already
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.BuilderExtensions.SetViaParamToDefault``1(Meep.Tech.Data.IBuilder,Meep.Tech.Data.IModel.Builder.Param)">
            <summary>
            Add a default value to the param collection if there isn't one set already
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.BuilderExtensions.GetParam``1(Meep.Tech.Data.IBuilder,System.String,``0)">
            <summary>
            Fetch a param from a collection, or the default if it's not provided, or the provided is a nullable and null is provided
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.BuilderExtensions.TryToGetParam``1(Meep.Tech.Data.IBuilder,System.String,``0@,``0)">
            <summary>
            Fetch a param from a collection, or the default if it's not provided, or the provided is a nullable and null is provided
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.BuilderExtensions.HasParam(Meep.Tech.Data.IBuilder,System.String)">
            <summary>
            Check if this has the given param
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.BuilderExtensions.HasParam(Meep.Tech.Data.IBuilder,System.String,System.Type@)">
            <summary>
            Check if this has the given param
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.BuilderExtensions.GetAndValidateParamAs``1(Meep.Tech.Data.IBuilder,System.String)">
            <summary>
            Fetch a param from a collection. The param cannot be left out, and no defaults will be replaced.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.BuilderExtensions.SetDefaultParamValue``1(Meep.Tech.Data.IBuilder,System.String,``0)">
            <summary>
            Add a default value to the param collection if there isn't one set already
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.BuilderExtensions.SetParam``1(Meep.Tech.Data.IBuilder,System.String,``0)">
            <summary>
            set a value
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IModel`2">
            <summary>
            The base interface for all Branchable XBam Models.
            A Model is a mutable grouping of data fields that can be produced by an Archetype.
            Brnachable XBam models can have branching inheritance trees for both the Archetypes that produce the Models, and the Models produced.
            This is the nbase interface for utility only, don't inherit from this directly; Extend IModel[], Model[], or Model[,], or  Model[,].IFromInterface instead.
            </summary>
            <see cref="T:Meep.Tech.Data.IModel`1"/>
            <see cref="T:Meep.Tech.Data.Model`1"/>
            <see cref="T:Meep.Tech.Data.Model`2"/>
            <see cref="T:Meep.Tech.Data.Model`2.IFromInterface"/>
        </member>
        <member name="P:Meep.Tech.Data.IModel`2.Archetype">
            <summary>
            The archetype for this model
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel`2.Meep#Tech#Data#IModel#Initialize(Meep.Tech.Data.IBuilder)">
            <summary>
            For the base configure calls
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel`2.Meep#Tech#Data#IModel#ToJson(Newtonsoft.Json.JsonSerializer)">
            <summary>
            Turn the model into a serialized data object.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModel`2.FromJson(Newtonsoft.Json.Linq.JObject,System.Type,Meep.Tech.Data.Universe,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Deserialize a model from json as a TModelBase
            </summary>
            <param name="deserializeToTypeOverride">You can use this to try to make JsonSerialize 
               use a different Type's info for deserialization than the default returned from GetModelTypeProducedBy</param>
        </member>
        <member name="T:Meep.Tech.Data.IModelExtensions">
            <summary>
            Extension methods for models
            </summary>
            <see cref="T:Meep.Tech.Data.IModel"/>
        </member>
        <member name="M:Meep.Tech.Data.IModelExtensions.ToJson(Meep.Tech.Data.IModel,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Turn the model into a serialized data object.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IModelExtensions.Copy(Meep.Tech.Data.IModel)">
            <summary>
            Copy the model by serializing and deserializing it.
            Overrideable via IModel.copy()
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Model`2">
            <summary>
            The base class for a mutable data model that can be produced by an Archetype.
            This includes a components system.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`2.FromJson(Newtonsoft.Json.Linq.JObject,System.Type,Meep.Tech.Data.Universe,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Deserialize a model from json as a TModelBase
            </summary>
            <param name="deserializeToTypeOverride">You can use this to try to make JsonSerialize 
               use a different Type's info for deserialization than the default returned from GetModelTypeProducedBy</param>
        </member>
        <member name="M:Meep.Tech.Data.Model`2.FromJsonAs``1(Newtonsoft.Json.Linq.JObject,System.Type,Meep.Tech.Data.Universe,System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Deserialize a model from json as a TModelBase
            </summary>
            <typeparam name="TModel">The type to cast the produced model to. Not the same as deserializeToTypeOverride</typeparam>
            <param name="deserializeToTypeOverride">You can use this to try to make JsonSerialize 
               use a different Type's info for deserialization than the default returned from GetModelTypeProducedBy</param>
        </member>
        <member name="P:Meep.Tech.Data.Model`2.Types">
            <summary>
            Default collection of archetypes for this model type based on the Default Univese
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Model`2.Archetype">
            <summary>
            The model's archetype:
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`2.Make``1(`1,System.Action{Meep.Tech.Data.IModel.Builder})">
            <summary>
            Make shortcut.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`2.Make(`1,System.Action{Meep.Tech.Data.IModel.Builder})">
            <summary>
            Make shortcut.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Model`2.IFromInterface">
            <summary>
            Used to make Model[TModelBase, TArchetypeBase] but from an interface. For struct based models, or if you want to use your own base type.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Model`2.IFromInterface.Archetype">
            <summary>
            The archetype for this model
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`2.IFromInterface.Meep#Tech#Data#IModel#Initialize(Meep.Tech.Data.IBuilder)">
            <summary>
            For the base configure calls
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Model`2.WithComponents">
            <summary>
            A Model with Components built in
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Model`2.WithComponents.Components">
            <summary>
            Publicly readable components
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Model`2.WithComponents._components">
            <summary>
            Internally stored components
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Model`2.WithComponents.Meep#Tech#Data#IReadableComponentStorage#ComponentsByBuilderKey">
            <summary>
            The accessor for the default Icomponents implimentation
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Model`2.WithComponents.Meep#Tech#Data#IReadableComponentStorage#ComponentsWithWaitingContracts">
            <summary>
            The accessor for the default Icomponents implimentation
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`2.WithComponents.GetComponent``1">
            <summary>
            Get a component if it exists. Throws if it doesn't
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`2.WithComponents.GetComponent(System.String)">
            <summary>
            Get a component if it exists. Throws if it doesn't
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`2.WithComponents.GetComponent``1(System.String)">
            <summary>
            Get a component if it exists. Throws if it doesn't
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`2.WithComponents.TryToGetComponent(System.Type,Meep.Tech.Data.IModel.IComponent@)">
            <summary>
            Get a component if this has a component of that given type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`2.WithComponents.TryToGetComponent``1(``0@)">
            <summary>
            Get a component if this has a component of that given type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`2.WithComponents.HasComponent``1">
            <summary>
            Check if this has a given component by base type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`2.WithComponents.HasComponent(System.Type)">
            <summary>
            Check if this has a given component by base type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`2.WithComponents.HasComponent(System.String)">
            <summary>
            Check if this has a component matching the given object
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`2.WithComponents.TryToGetComponent(System.String,Meep.Tech.Data.IModel.IComponent@)">
            <summary>
            Get a component if this has that given component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`2.WithComponents.HasComponent(Meep.Tech.Data.IModel.IComponent)">
            <summary>
            Check if this has a component matching the given object
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`2.WithComponents.TryToGetComponent(Meep.Tech.Data.IModel.IComponent,Meep.Tech.Data.IModel.IComponent@)">
            <summary>
            Get a component if this has that given component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`2.WithComponents.AddComponent(Meep.Tech.Data.IModel.IComponent)">
            <summary>
            Add a new component, throws if the component key is taken already
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`2.WithComponents.AddNewComponent``1(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.Object}})">
            <summary>
            Add a new component, throws if the component key is taken already
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`2.WithComponents.AddNewComponent``1(System.ValueTuple{System.String,System.Object}[])">
            <summary>
            Add a new component, throws if the component key is taken already
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`2.WithComponents.UpdateComponent(Meep.Tech.Data.IModel.IComponent)">
            <summary>
            replace an existing component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`2.WithComponents.UpdateComponent``1(System.Func{``0,``0})">
            <summary>
            update an existing component, given it's current data
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`2.WithComponents.AddOrUpdateComponent(Meep.Tech.Data.IModel.IComponent)">
            <summary>
            Add or replace a component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`2.WithComponents.RemoveComponent(Meep.Tech.Data.IModel.IComponent)">
            <summary>
            Remove an existing component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`2.WithComponents.RemoveComponent``1">
            <summary>
            Remove an existing component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`2.WithComponents.RemoveComponent``1(Meep.Tech.Data.IComponent@)">
            <summary>
            Remove an existing component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`2.WithComponents.RemoveComponent(System.Type)">
            <summary>
            Remove an existing component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`2.WithComponents.RemoveComponent(System.Type,Meep.Tech.Data.IComponent@)">
            <summary>
            Remove an existing component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Model`2.WithComponents.RemoveComponent(System.String,Meep.Tech.Data.IModel.IComponent@)">
            <summary>
            Remove and get an existing component
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.ICached">
            <summary>
            Base functionality for cacheable models
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ICached.Set(Meep.Tech.Data.ICached)">
            <summary>
            Set an item to the cache
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ICached.TryToGetFromCache(System.String)">
            <summary>
            Try to load an item fro mthe cache by id.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ICached.GetFromCache(System.String)">
            <summary>
             load an item from the cache by id.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ICached.Clear(System.String)">
            <summary>
            Clear the cached model
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ICached.ClearAll">
            <summary>
            Clear all caches fully
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.ICached`1">
            <summary>
            A Model that can be cached
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ICached`1.TryToGetFromCache(System.String)">
            <summary>
            Try to load an item fro mthe cache by id.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ICached`1.GetFromCache(System.String)">
            <summary>
            Load an item from the cache by id.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ICached`1.TryToGetFromCache(System.String,`0@)">
            <summary>
            Try to load an item from the cache by id
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ICached`1.Cache(`0)">
            <summary>
            Cache an item of the given type.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ICached`1.Clear(System.String)">
            <summary>
            Clear the cached model of this type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.ICached`1.ClearAll">
            <summary>
            Clear the cache fully of items of this type
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IUnique">
            <summary>
            An unique object with a unique id.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IUnique.Params">
            <summary>
            Params for Unique models
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IUnique.Params.UniqueId">
            <summary>
            Unique id for any type of model
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IUnique.Id">
            <summary>
            The Unique Id of this Item
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.IUnique.AutoSetIdOnBuild">
            <summary>
            If the id should be automatically set by the IModel.Builder
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IUnique.Copy(System.Boolean)">
            <summary>
            Copy the model by serializing and deserializing it.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.IUniqueExtensions">
            <summary>
            Extensions and helpers for IUnique
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IUniqueExtensions.GetUniqueId(Meep.Tech.Data.IUnique)">
            <summary>
            Get the unique id
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IUniqueExtensions._resetUniqueId(Meep.Tech.Data.IUnique)">
            <summary>
            Changes the unique id of this model.
            This can break saving/linking!
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.IUniqueExtensions.Copy(Meep.Tech.Data.IUnique,System.Boolean)">
            <summary>
            Copy a unique model, with a new unique id
            Override via IUnique.copy(bool)
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Archetypes">
            <summary>
            Static data for archetyps in the DefaultUniverse
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetypes.DefaultUniverse">
            <summary>
            The default universe to use for static access shortcuts
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetypes.All">
            <summary>
            All archetypes:
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetypes.Ids">
            <summary>
            All registered Archetype Identities
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetypes.Id">
            <summary>
            Ids, indexed by external id value
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetypes.Collections">
            <summary>
            All archetypes:
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetypes.GetCollectionFor(Meep.Tech.Data.Archetype)">
            <summary>
            Get a collection registered to an archetype root:
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetypes.AsArchetype(System.Type)">
            <summary>
            Get a system type as an archetype.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetypes.TryToGetAsArchetype(System.Type)">
            <summary>
            Get a system type as an archetype.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Archetypes.AsArchetype``1(System.Type)">
            <summary>
            Get a system type as an archetype.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Archetypes`1">
            <summary>
            Static data for archetypes in the DefaultUniverse, by archetype class.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetypes`1.Instance">
            <summary>
            The instance of this archetype type
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetypes`1.Archetype">
            <summary>
            The instance of this archetype type
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetypes`1._">
            <summary>
            The instance of this archetype type
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetypes`1.u">
            <summary>
            The instance of this archetype type
            This is because ._. looks sad sometimes, so you can use .u. to cheer them up.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetypes`1.w">
            <summary>
            The instance of this archetype type
            uwu
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Archetypes`1.Collection">
            <summary>
            Helper to get the collection for this archetype:
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Components">
            <summary>
            Static data values for components
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Components.DefaultUniverse">
            <summary>
            The default universe to use for models
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Components.GetKey(System.Type)">
            <summary>
            Get the builder for a given component by type.d
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Components.GetBuilderFactory(System.Type)">
            <summary>
            Get the builder for a given component by type.d
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Components.GetBuilderFactory``1">
            <summary>
            Get the builder for a given component by type.d
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Components.GetComponentBaseType(System.Type)">
            <summary>
            Get the base model type of this model type.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Components`1">
            <summary>
            Static data values for components
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Components`1.Key">
            <summary>
            The key for this type of component.
            This is based on the base model type's name.
            There should only be one component per key on a model.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Components`1.BuilderFactory">
            <summary>
            Builder instance for this type of component.
            You can use this to set a custom builder for this type of component and it's children.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Models">
            <summary>
            Constants and static access for different types of Models
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Meep.Tech.Data.Models.DefaultUniverse" -->
        <member name="M:Meep.Tech.Data.Models.GetBuilderFactoryFor(System.Type)">
            <summary>
            Get the builder for a given component by type.d
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Models.GetModelBaseType(System.Type)">
            <summary>
            Get the base model type of this model type.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Models.GetCompareLogicFor(System.Type)">
            <summary>
            Get logic used to compare models of the given type
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Models`1">
            <summary>
            Static data values for components
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Models`1.CompareLogic">
            <summary>
            Overrideable Compare logic for each type of model.
            This is inherited once set
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Models`1.Factory">
            <summary>
            Builder instance for this type of component.
            You can use this to set a custom builder for this type of model and it's children.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Models`1.SetBuilderConstructor(System.Func{Meep.Tech.Data.IModel{`0}.Builder,`0})">
            <summary>
            Set a new constructor for this model's builder class.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Universe">
            <summary>
            A global collection of arechetypes.
            This is what the loader builds.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Universe.ExtraContext">
            <summary>
            A Type that can be added as context to a universe.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.Universe">
            <summary>
            The universe this context is for.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderInitializationStart">
            <summary>
            Code that's executed before initialization of the loader
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderInitializationComplete">
            <summary>
            Code that's executed after initialization of the loader, before any types are loaded
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderAssembliesCollected">
            <summary>
            Code that's executed after the loader collects the initial assemblies to work on
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderInitialSystemTypesCollected">
            <summary>
            Code that's executed after the loader collects the initial system types to work on
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderAssemblyLoadStart">
            <summary>
            Code that's executed before an aseembly's types are loaded
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderAssemblyLoadComplete">
            <summary>
            Code that's executed after an aseembly's types are loaded
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderEnumInitializationStart">
            <summary>
            Code that's executed when an enumeration is about to be initialized.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderEnumInitializationComplete">
            <summary>
            Code that's executed when an enumeration is done being initialized.
            the first bool is if it was successful or not.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderComponentInitializationStart">
            <summary>
            Code that's executed when an component is about to be initialized.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderBuildTestComponentStart">
            <summary>
            Code that's executed when an component is about to be test built.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderBuildTestComponentComplete">
            <summary>
            Code that's executed when an component is done being test built.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderComponentInitializationComplete">
            <summary>
            Code that's executed when an component is done being initialized.
            the first bool is if it was successful or not.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderSimpleModelInitializationStart">
            <summary>
            Code that's executed when an simple model is about to be initialized.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderSimpleModelInitializationComplete">
            <summary>
            Code that's executed when an simple model is about to be initialized.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderArchetypeInitializationStart">
            <summary>
            Code that's executed when an archetype is about to be initialized.
            the bool indicates if it's a splayed sub-type.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderArchetypeInitializationComplete">
            <summary>
            Code that's executed when an archetype is about to be initialized.
            the first bool indicates success. The second bool indicates if it's a splayed sub-type.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderModelFullInitializationStart">
            <summary>
            Code that's executed when a model is about to be initialized.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderModelFullRegistrationStart">
            <summary>
            Code that's executed before final initialization but after registration of a new type of model.
            Default model is null if the model type is generic and can't be tested.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderModelFullRegistrationComplete">
            <summary>
            Code that's executed before final initialization but after registration of a new type of model.
            Default model is null if the model type is generic and can't be tested.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderModelFullInitializationComplete">
            <summary>
            Code that's executed when a model is about to be initialized.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderTypesInitializationFirstRunComplete">
            <summary>
            Code that's executed after all models, enums, components and archetypes are initialized the first time.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderFurtherAnizializationAttemptStart">
            <summary>
            Code that's executed if there's further initialization attempt loops needed because there are uninitialized types.
            This happens if types are missing dependencies the first time their assembly is loaded.
            The passed in value is the attempt number, starting at 2, as it's the second attempt.
            See OnLoaderAssemblyLoadComplete and OnLoaderTypesInitializationFirstRunComplete for the first load attempt
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderFurtherAnizializationAttemptComplete">
            <summary>
            Code that's executed if there's further initialization attempt loops needed because there are uninitialized types.
            This happens if types are missing dependencies the first time their assembly is loaded.
            The passed in value is the attempt number, starting at 2, as it's the second attempt.
            See OnLoaderAssemblyLoadComplete and OnLoaderTypesInitializationFirstRunComplete for the first load attempt
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderTypesInitializationAllRunsComplete">
            <summary>
            Code that's executed after all models, enums, components and archetypes are initialized for all looping run attempts.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderBuildAllTestModelsStart">
            <summary>
            Code that's executed before test models start being built
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderTestModelBuildStart">
            <summary>
            Code that's executed before a test model is built for an archetype.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderTestModelBuildComplete">
            <summary>
            Code that's executed when a test model is done being built for an archetype.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderBuildAllTestModelsComplete">
            <summary>
            Code that's executed after all test models have been built
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderAllModificationsStart">
            <summary>
            Code that's executed when modifications are about to be loaded in assembly order
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderModificationStart">
            <summary>
            Code that's executed when a modification is about to be loaded
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderModificationComplete">
            <summary>
            Code that's executed when a modification finishes loading or fails to load
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderAllModificationsComplete">
            <summary>
            Code that's executed when modifications are done loading, before all types are finalized.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderAutoBuildPropertyCreationStart">
            <summary>
            Executed once for each xbam auto build property created when scanning models.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderAutoBuildPropertyCreationComplete">
            <summary>
            Executed once for each xbam auto build property created when scanning models.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderModelJsonPropertyCreationComplete">
            <summary>
            Executed once for each json property created when scanning models with the default contract resolver.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderFinishTypesStart">
            <summary>
            Code that's executed on finalization of the loader, after all types are already finalized and before the loader is sealed.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderFinishTypesComplete">
            <summary>
            Code that's executed on finalization of the loader, after all types are already finalized and before the loader is sealed.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderFinalizeStart">
            <summary>
            Code that's executed on finalization of the loader, after all types are already finalized and before the loader is sealed.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderFinalizeComplete">
            <summary>
            Code that's executed on finalization of the loader, after all types are already finalized and before the loader is sealed.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnLoaderIsFinished">
            <summary>
            Code that's executed lastly after the loader is finished and cleared.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContext.OnUnloadArchetype">
            <summary>
            Occurs when an archetype is un-loaded.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Universe.ExtraContextsData">
            <summary>
            An extra context that stores all other extra contexts for a universe.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ExtraContextsData.#ctor(Meep.Tech.Data.Universe)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ExtraContextsData.GetEnumerator">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ExtraContextsData.System#Collections#IEnumerable#GetEnumerator">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Meep.Tech.Data.Universe.ArchetypesData">
            <summary>
            Used to hold the data for all archetypes
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Universe.ArchetypesData._universe">
            <summary>
            link to the parent universe
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ArchetypesData.All">
            <summary>
            All archetypes:
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ArchetypesData.Ids">
            <summary>
            All registered Archetype Identities
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ArchetypesData.Id">
            <summary>
            Ids, indexed by external id value
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ArchetypesData.Dependencies">
            <summary>
            Dependencies for different types.
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Universe.ArchetypesData._rootArchetypeTypesByBaseModelType">
            <summary>
            Root types for archetypes based on a model type fullname.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ArchetypesData.RootCollections">
            <summary>
            All Root Archetype Collections.
            Doesn't include Branch collections.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ArchetypesData.Collections">
            <summary>
            All Archetype Collections:
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ArchetypesData.GetCollectionFor(Meep.Tech.Data.Archetype)">
            <summary>
            Get a collection registered to an archetype root:
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ArchetypesData._tryToGetCollectionFor(System.Type,Meep.Tech.Data.Archetype.Collection@)">
            <summary>
            Get a collection registered to an archetype root:
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ArchetypesData.GetCollectionFor(System.Type)">
            <summary>
            Get a collection registered to an archetype type:
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ArchetypesData.TryToGetCollectionFor(System.Type)">
            <summary>
            Get a collection registered to an archetype type.
            returns null if not found
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ArchetypesData.GetDefaultForModelOfType``1">
            <summary>
            Get the "default" archetype or factory for a given model type.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ArchetypesData.GetDefaultForModelOfType(System.Type)">
            <summary>
            Get the "default" archetype or factory for a given model type.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ArchetypesData.GetTraits(Meep.Tech.Data.Archetype)">
            <summary>
            Get the traits attached to the given archetype.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ArchetypesData._unRegisterCollection(Meep.Tech.Data.Archetype.Collection,System.Type)">
            <summary>
            TODO: impliment?
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Universe.ComponentsData">
            <summary>
            Data for all components in the universe
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ComponentsData.Count">
            <summary>
            The number of different loaded model types.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ComponentsData.Dependencies">
            <summary>
            Dependencies for different types.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ComponentsData.All">
            <summary>
            All base types, easily accessable
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Universe.ComponentsData._baseTypes">
            <summary>
            Cached model base types
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Universe.ComponentsData._byKey">
            <summary>
            Cached model base types
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Universe.ComponentsData._archetypeComponentsLinkedToModelComponents">
            <summary>
            Cached linked types
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ComponentsData.Get(System.String)">
            <summary>
            Get a component type by it's key
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ComponentsData.GetBuilderFactoryFor(System.Type)">
            <summary>
            Get the builder for a given component by type.d
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ComponentsData.GetBuilderFactoryFor``1">
            <summary>
            Get the builder for a given component by type.d
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ComponentsData.SetBuilderFactoryFor``1(Meep.Tech.Data.IComponent.IBuilderFactory)">
            <summary>
            Set the builder factory for a type of component.
            TODO: Must be doen during init or static ctor calls
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ComponentsData.GetComponentBaseType(System.Type)">
            <summary>
            Get the base model type of this component type.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.s">
            <summary>
            All Universes
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.Default">
            <summary>
            The default archetype universe
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.Key">
            <summary>
            The unique key of this universe.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.Loader">
            <summary>
            The loader used to build this universe
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ModelSerializer">
            <summary>
            The model serializer instance for this universe
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.Archetypes">
            <summary>
            Archetypes data
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.Models">
            <summary>
            Models data
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.Components">
            <summary>
            Components data
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.Enumerations">
            <summary>
            Enumerations Data
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ExtraContexts">
            <summary>
            The extra contexts
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.#ctor(Meep.Tech.Data.Configuration.Loader,System.String)">
            <summary>
            Make a new universe of Archetypes
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.SetExtraContext``1(``0)">
            <summary>
            Get an extra context item that was assigned to this universe.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.GetExtraContext``1">
            <summary>
            Get an extra context item that was assigned to this universe.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Universe.EnumerationData">
            <summary>
            Data pertaining to enumerations
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.EnumerationData.Universe">
            <summary>
            The universe this data is for
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.EnumerationData.ByType">
            <summary>
            All enumerations indexed by type.
            GetAllForType is faster.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.EnumerationData.GetAllByType(System.Type)">
            <summary>
            Get all enumerations of a given type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.EnumerationData.GetAllByType(System.String)">
            <summary>
            Get all enumerations of a given type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.EnumerationData.GetAllByType``1">
            <summary>
            Get all enumerations of a given type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.EnumerationData.Get(System.String,System.Object)">
            <summary>
            Get the enumerations of the given type with the given external id
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.EnumerationData.Get``1(System.Object)">
            <summary>
            Get the enumerations of the given type with the given external id
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.EnumerationData.Get(System.Type,System.Object)">
            <summary>
            Get the enumerations of the given type with the given external id
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.EnumerationData.TryToGet(System.Type,System.Object,Meep.Tech.Data.Enumeration@)">
            <summary>
            Get the enumerations of the given type with the given external id
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.EnumerationData.TryToGet``1(System.Object,``0@)">
            <summary>
            Get the enumerations of the given type with the given external id
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Universe.ModelsData">
            <summary>
            Data for the models in a Xbam universe.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ModelsData.Count">
            <summary>
            The number of different loaded model types.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ModelsData.Dependencies">
            <summary>
            Dependencies for different types.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ModelsData.All">
            <summary>
            Stores simple access to all model types that can be produced.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ModelsData.BaseTypes">
            <summary>
            Stores simple access to all model base types.
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Universe.ModelsData._baseTypes">
            <summary>
            Cached model base types
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Universe.ModelsData._modelTypesProducedByArchetypes">
            <summary>
            Cached model base types
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Universe.ModelsData._factories">
            <summary>
            The collection of all base model BuilderFactories.
            </summary>
        </member>
        <member name="P:Meep.Tech.Data.Universe.ModelsData.Universe">
            <summary>
            Link to the parent universe
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Universe.ModelsData._factoriesByModelBases">
            <summary>
            The collection of all base model BuilderFactories.
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Universe.ModelsData._factoriesByModelType">
            <summary>
            The collection of all base model BuilderFactories.
            </summary>
        </member>
        <member name="F:Meep.Tech.Data.Universe.ModelsData._compareLogicByModelType">
            <summary>
            The compare logic organized by inheritance/types
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ModelsData.GetBuilderFactoryFor(System.Type)">
            <summary>
            Get the builder factory for a given type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ModelsData.GetCompareLogicFor(System.Type)">
            <summary>
            Get the builder factory for a given type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ModelsData.GetBuilderFactoryFor``1">
            <summary>
            Get the builder factory for a given type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ModelsData.SetInitialBuilderFactoryFor``1(Meep.Tech.Data.IModel.IBuilderFactory)">
            <summary>
            Set the builder factory for a type of component.
            TODO: Must be doen during init
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ModelsData.GetModelTypeProducedBy(Meep.Tech.Data.Archetype)">
            <summary>
            Get the model type an archetype should produce by default.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ModelsData.GetModelBaseType(System.Type)">
            <summary>
            Get the base model type of this model type.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ModelsData._findModelBaseType(System.Type)">
            <summary>
            Calculate this model's base model type.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ModelsData.SetBuilderConstructor``1(System.Func{Meep.Tech.Data.IModel{``0}.Builder,``0})">
            <summary>
            Set a new constructor for this model's builder class.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ModelsData._findFirstInheritedFactory(System.Type)">
            <summary>
            Get the first factory inherited by a given model:
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ModelsData._findFirstInheritedDataItemFor``1(System.Type,System.Func{System.Type,``0},System.Func{System.Type,``0},System.Action{System.Type,``0})">
            <summary>
            Get the first factory inherited by a given model:
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ModelsData._findFirstInheritedCompareLogic(System.Type)">
            <summary>
            Get the first factory inherited by a given model:
            TODO: this and the find first factory logic should be combined into one, with find first factory taking precidence. It's more up to date.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ModelsData._makeDefaultCompareLogic">
            <summary>
            Makes the default compare logic using this universes settings
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ModelsData._makeDefaultFactoryFor(System.Type)">
            <summary>
            Make the default factory for a model type using reflection:
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ModelsData._getDefaultCtorFor``1(System.Type)">
            <summary>
            Make an object ctor from a provided default ctor.
            Valid CTORS:
             - public|private|protected Model(IBuilder builder)
             - public|private|protected Model()
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Universe.ModelsData._getDefaultCtorFor(System.Type)">
            <summary>
            Make an object ctor from a provided default ctor.
            Valid CTORS:
             - public|private|protected Model(IBuilder builder)
             - public|private|protected Model()
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Utility.Comparitors">
            <summary>
            Verbose(in-code) Comparitors
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Utility.Comparitors.Identity``1(``0)">
            <summary>
            Verbose identity comparitor
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Utility.GenericExtensions">
            <summary>
            Extensions for any class or struct
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Utility.GenericExtensions.Modify``1(``0,System.Func{``0,``0})">
            <summary>
            Modify and return something.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Utility.GenericExtensions.Modify``1(``0,System.Action{``0})">
            <summary>
            Modify and return an object.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Utility.GenericExtensions.As``2(``0,System.Func{``0,``1})">
            <summary>
            Modify and return an object.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Utility.GenericExtensions.ThenReturn``2(``0,System.Func{``0,``1})">
            <summary>
            Modify and return an object.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Utility.GenericExtensions.ThenDo``1(``0,System.Action{``0})">
            <summary>
            do something with this object.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Utility.StringUtilities">
            <summary>
            Some string utilities i use a lot
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Utility.StringUtilities.LimitTo(System.String,System.Int32,System.Boolean)">
            <summary>
            Limit a string to a max size, with or without elipses.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Utility.StringUtilities.ToSentenceCase(System.String)">
            <summary>
            Converts this pascal case string to sentence case with spaced words.
            From: https://www.codeproject.com/Articles/108996/Splitting-Pascal-Camel-Case-with-RegEx-Enhancement
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.JsonExtensions.GetValue``1(Newtonsoft.Json.Linq.JObject,System.String,System.StringComparison,System.String)">
            <summary>
            Try to get a value by type, case insensitive by default.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.JsonExtensions.TryGetValue``1(Newtonsoft.Json.Linq.JObject,System.String,System.StringComparison,``0)">
            <summary>
            Try to get a value by type, case insensitive by default.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.JsonExtensions.HasProperty(Newtonsoft.Json.Linq.JObject,System.String,System.StringComparison)">
            <summary>
            See if this has a property, case insensitive by default.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.JsonExtensions.HasProperty(Newtonsoft.Json.Linq.JObject,System.String,System.String@,System.StringComparison)">
            <summary>
            See if this has a property, case insensitive by default.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.JsonExtensions.RemoveProperty(Newtonsoft.Json.Linq.JObject,System.String,System.StringComparison)">
            <summary>
            remove a property if it exists, case insensitive by default.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Reflection.ConstructorExtensions">
            <summary>
            Used for constructing types.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Reflection.ConstructorExtensions.ObjectActivator`1">
            <summary>
            A faster alternative to Activator.CreateInstance.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Reflection.ConstructorExtensions.GetActivator``1(System.Reflection.ConstructorInfo)">
            <summary>
            Get an activator that works quicker than Activator.CreateInstance and is cached.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Reflection.FieldExtensionMethods.TryToGetAttribute``1(System.Reflection.PropertyInfo,``0@)">
            <summary>
            Try to get an attribute
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Reflection.FieldExtensionMethods.Get(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Faster get value for properties.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Reflection.FieldExtensionMethods.Set(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            Faster set value for properties.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.Reflection.TypeExtensions">
            <summary>
            Shortcuts and caching for casting types for xbam
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Reflection.TypeExtensions.IsAssignableToGeneric(System.Type,System.Type)">
            <summary>
            Check if a given type is assignable to a generic type
            </summary>
            <param name="givenType"></param>
            <param name="genericType"></param>
            <returns></returns>
        </member>
        <member name="M:Meep.Tech.Data.Reflection.TypeExtensions.GetFirstInheritedGenericTypeParameters(System.Type,System.Type)">
            <summary>
            Get the generic arguments from a type this inherits from
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Reflection.TypeExtensions.GetAllInheritedGenericTypeParameters(System.Type,System.Type)">
            <summary>
            Get the generic arguments from a type this inherits from
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Reflection.TypeExtensions.GetAllInheritedGenericTypes(System.Type,System.Type)">
            <summary>
            Get the generic arguments from a type this inherits from
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Reflection.TypeExtensions.GetParentTypes(System.Type)">
            <summary>
            Get all parent types and interfaces 
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Reflection.TypeExtensions.GetDepthOfInheritance(System.Type)">
            <summary>
            Get the depth of inheritance of a type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Reflection.TypeExtensions.CastTo(System.Object,System.Type)">
            <summary>
            Tries to cast an object to a given type. First time is expensive
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Reflection.TypeExtensions.GetTypeByFullName(System.String)">
            <summary>
            Can be used to get any type by it's full name. Searches all assemblies and returns first match.
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Reflection.TypeExtensions.TryToGetAttribute``1(System.Type,``0@)">
            <summary>
            Try to get an attribute
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Reflection.TypeExtensions.BuildNoOpDelegate(System.Type)">
            <summary>
            Build a no opp function for a delegate type
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.Reflection.TypeExtensions.ToFullHumanReadableNameString(System.Type,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Get a clean, easier to read type name that's still fully qualified.
            </summary>
        </member>
        <member name="T:Meep.Tech.Data.XbamSpecificDictionaryExtensions">
            <summary>
            Dictionaty extensions specific to xbam components
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.XbamSpecificDictionaryExtensions.Append(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Object)">
            <summary>
            Append a value to a dictionary and return the collection
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.XbamSpecificDictionaryExtensions.Append``1(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Func{Meep.Tech.Data.IBuilder,Meep.Tech.Data.IModel.IComponent}},System.Func{Meep.Tech.Data.IBuilder,``0})">
            <summary>
            Append a new component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.XbamSpecificDictionaryExtensions.Append``1(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Func{Meep.Tech.Data.IBuilder,Meep.Tech.Data.IModel.IComponent}})">
            <summary>
            Append a new component with a default builder
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.XbamSpecificDictionaryExtensions.Update``1(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Func{Meep.Tech.Data.IBuilder,Meep.Tech.Data.IModel.IComponent}},System.Func{Meep.Tech.Data.IBuilder,``0})">
            <summary>
            update an existing component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.XbamSpecificDictionaryExtensions.Update``1(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Func{Meep.Tech.Data.IBuilder,Meep.Tech.Data.IModel.IComponent}},System.Func{``0,``0})">
            <summary>
            update an existing component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.XbamSpecificDictionaryExtensions.Update``1(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Func{Meep.Tech.Data.IBuilder,Meep.Tech.Data.IModel.IComponent}},System.Func{Meep.Tech.Data.IBuilder,``0,``0})">
            <summary>
            update an existing component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.XbamSpecificDictionaryExtensions.Append``1(System.Collections.Generic.IReadOnlyDictionary{System.String,Meep.Tech.Data.Archetype.IComponent})">
            <summary>
            Append a new component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.XbamSpecificDictionaryExtensions.Append(System.Collections.Generic.IReadOnlyDictionary{System.String,Meep.Tech.Data.Archetype.IComponent},Meep.Tech.Data.Archetype.IComponent)">
            <summary>
            Append a new component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.XbamSpecificDictionaryExtensions.Update(System.Collections.Generic.IReadOnlyDictionary{System.String,Meep.Tech.Data.Archetype.IComponent},Meep.Tech.Data.Archetype.IComponent)">
            <summary>
            update an existing component
            </summary>
        </member>
        <member name="M:Meep.Tech.Data.XbamSpecificDictionaryExtensions.Update``1(System.Collections.Generic.IReadOnlyDictionary{System.String,Meep.Tech.Data.Archetype.IComponent},System.Func{``0,``0})">
            <summary>
            update an existing component
            </summary>
        </member>
        <member name="T:Meep.Tech.Collections.Generic.DelegateCollection`1">
            <summary>
            An ordered collection of delegates
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DelegateCollection`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}})">
            <summary>
            Make a new delegate collection.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DelegateCollection`1.op_Implicit(`0)~Meep.Tech.Collections.Generic.DelegateCollection{`0}">
            <summary>
            Make a delegate collection from one action.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DelegateCollection`1.op_Implicit(System.Collections.Generic.List{`0})~Meep.Tech.Collections.Generic.DelegateCollection{`0}">
            <summary>
            Make a delegate collection from a list of actions.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DelegateCollection`1.op_Implicit(System.Collections.Generic.Dictionary{System.String,`0})~Meep.Tech.Collections.Generic.DelegateCollection{`0}">
            <summary>
            Make a delegate collection from a dictionary of actions.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DelegateCollection`1.op_Implicit(`0[])~Meep.Tech.Collections.Generic.DelegateCollection{`0}">
            <summary>
            Make a delegate collection from an array of actions.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DelegateCollection`1.ReDelegate``1(System.Func{`0,``0})">
            <summary>
            wrap all the delegates and return a new collection
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DictionaryExtensions.TryToGet``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)">
            <summary>
            Try tho get a value. Returns default on failure.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DictionaryExtensions.TryToGet``3(``0,``1)">
            <summary>
            Try tho get a value. Returns default on failure.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DictionaryExtensions.TryToGet``3(``0,``1,``2)">
            <summary>
            Try tho get a value. Returns default on failure.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DictionaryExtensions.Add``3(``0,``2,System.Func{``2,``1})">
            <summary>
            Add an item inline without needing to make it if it contains it's own key
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DictionaryExtensions.Set``3(``0,``1,``2)">
            <summary>
            Set ([]=) alias.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DictionaryExtensions.AddToValueCollection``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.ICollection{``1}},``0,``1)">
            <summary>
            Add an item to a ICollection within a dictionary at the given key
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DictionaryExtensions.AddToValueCollection``2(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.List{``1}},``0,``1)">
            <summary>
            Add an item to a ICollection within a dictionary at the given key
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DictionaryExtensions.AddToValueCollection``3(``0,``1,``2)">
            <summary>
            Add an item to a ICollection within a dictionary at the given key
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DictionaryExtensions.AppendToValueCollection``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.IEnumerable{``1}},``0,``1)">
            <summary>
            Add an item to a ICollection within a dictionary at the given key
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DictionaryExtensions.AppendToValueCollection``3(``0,``1,``2)">
            <summary>
            Add an item to a ICollection within a dictionary at the given key
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DictionaryExtensions.RemoveFromValueCollection``3(``0,``1,``2)">
            <summary>
            Remove an item from an ICollection within a dictionary at the given key
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DictionaryExtensions.RemoveFromValueCollection``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.ICollection{``1}},``0,``1)">
            <summary>
            Remove an item from an ICollection within a dictionary at the given key
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DictionaryExtensions.RemoveFromValueCollection``2(System.Collections.Generic.Dictionary{``0,System.Collections.Generic.List{``1}},``0,``1)">
            <summary>
            Remove an item from an ICollection within a dictionary at the given key
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DictionaryExtensions.AddToInnerHashSet``3(``0,``1,``2)">
            <summary>
            Add an item to a ICollection within a dictionary at the given key
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DictionaryExtensions.AddToInnerHashSet``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.HashSet{``1}},``0,``1)">
            <summary>
            Add an item to a ICollection within a dictionary at the given key
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DictionaryExtensions.RemoveFromInnerHashSet``3(``0,``1,``2)">
            <summary>
            Add an item to a ICollection within a dictionary at the given key
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DictionaryExtensions.RemoveFromInnerHashSet``2(System.Collections.Generic.IDictionary{``0,System.Collections.Generic.HashSet{``1}},``0,``1)">
            <summary>
            Add an item to a ICollection within a dictionary at the given key
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DictionaryExtensions.Bucketize``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Bucketize a collecton of keys and values.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DictionaryExtensions.WithPair``1(System.Collections.Generic.HashSet{``0},``0)">
            <summary>
            Append a value to a hash set and return the collection
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DictionaryExtensions.WithAddedPair``3(``0,``1,``2)">
            <summary>
            Append a value to a dictionary and return the collection
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DictionaryExtensions.Append``3(``0,``1,``2)">
            <summary>
            Append a value to a dictionary and return the collection
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DictionaryExtensions.WithSetPair``3(``0,``1,``2)">
            <summary>
            Append a value to a dictionary and return the collection
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DictionaryExtensions.WithVauesFrom``3(``0,System.Collections.Generic.IReadOnlyDictionary{``1,``2}[])">
            <summary>
            Merge dictionaries together, overriding any values with the same key.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.DictionaryExtensions.Merge``3(``0,System.Collections.Generic.IReadOnlyDictionary{``1,``2}[])">
            <summary>
            Merge dictionaries together, returning a new dictionary with the combined values.
            The new dictionaries override values as they're added.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.EnumerableExtensions.Of``1(System.Int32,``0)">
            <summary>
            Get x of something.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.EnumerableExtensions.Of``1(System.Int32,System.Func{``0})">
            <summary>
            Get x of something.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.EnumerableExtensions.Of``1(System.Int32,System.Func{System.Int32,``0})">
            <summary>
            Get x of something with the index looping up
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.EnumerableExtensions.AsSingleItemEnumerable``1(``0)">
            <summary>
            Turn one item into an enumerable contaiing itself.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            do on each
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            do on each with an index too
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            do on each
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            do on each with an index too
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.EnumerableExtensions.AppendIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Boolean},``0)">
            <summary>
            append a value if the condition is true
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.EnumerableExtensions.ConcatIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Boolean},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            append a value if the condition is true
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.EnumerableExtensions.ConcatIfNotNull``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            append a value if the condition is true
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.EnumerableExtensions.Reverse``1(System.Collections.Generic.IList{``0})">
            <summary>
            Reverse the list.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.EnumerableExtensions.Until``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Get the values until the desired index. Not including it.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.ListExtensions.RandomEntry``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <summary>
            Get a random entry.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.ListExtensions.Deconstruct``1(System.Collections.Generic.IList{``0},``0@,System.Collections.Generic.IList{``0}@)">
            <summary>
            spread opperators
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.ListExtensions.Deconstruct``1(System.Collections.Generic.IList{``0},``0@,``0@,System.Collections.Generic.IList{``0}@)">
            <summary>
            spread opperators
            </summary>
        </member>
        <member name="T:Meep.Tech.Collections.Generic.IOrderedDictionary`2">
            <summary>
            A collection of items, each indexed by a key and in list order by an index.
            Read + Writeable
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IOrderedDictionary`2.SetByIndex(System.Int32,`1)">
            <summary>
            Sets the value at the index specified, maintaining the same key that's currently pointing at this index.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IOrderedDictionary`2.SetByKey(`0,`1)">
            <summary>
            set a value by it's key, adding a new entry if the key isn't present at the end of the list.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IOrderedDictionary`2.InsertByIndex(System.Int32,`0,`1)">
            <summary>
            Insert an item into the collection at an existing index.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IOrderedDictionary`2.RemoveAt(System.Int32)">
            <summary>
            Remove the value at the given index.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IOrderedDictionary`2.RemoveByKey(`0)">
            <summary>
             Remove using the key.
             This can help as an alternative to Remove if the key is an int
             </summary>
        </member>
        <member name="T:Meep.Tech.Collections.Generic.IReadOnlyKeyedSet`2">
            <summary>
            A Keyed Set, but readonly.
            </summary>
        </member>
        <member name="T:Meep.Tech.Collections.Generic.IReadOnlyOrderedDictionary`2">
            <summary>
            A Read only ordered dictionary.
            </summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.IReadOnlyOrderedDictionary`2.Item(System.Int32)">
            <summary>
            Get the item at the given ordered index.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyOrderedDictionary`2.GetValueAtIndex(System.Int32)">
            <summary>
            Get the item at the given ordered index.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyOrderedDictionary`2.GetKeyAtIndex(System.Int32)">
            <summary>
            Get the key at the given index
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyOrderedDictionary`2.GetPairAtIndex(System.Int32)">
            <summary>
            Get the item at the given ordered index.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyOrderedDictionary`2.TryToGetPairAtIndex(System.Int32,System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
            Try to get the item at the given ordered index.
            </summary>
            <param name="value">The found value, or default if not found.</param>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyOrderedDictionary`2.TryToGetPairAtIndex(System.Int32)">
            <summary>
            Get the item at the given ordered index.
            </summary>
            <returns>The value, or Default if not found.</returns>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyOrderedDictionary`2.GetValueWithKey(`0)">
            <summary>
            Get the item with the given key.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyOrderedDictionary`2.TryGetValueAtIndex(System.Int32,`1@)">
            <summary>
            Try to get the item at the given ordered index.
            </summary>
            <param name="value">The found value, or default if not found.</param>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyOrderedDictionary`2.TryGetValue(`0)">
            <summary>
            Try to get the item with the given key.
            </summary>
            <returns>The value, or Default if not found.</returns>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyOrderedDictionary`2.TryGetValueAtIndex(System.Int32)">
            <summary>
            Try to get the item at the given ordered index.
            </summary>
            <returns>The value, or Default if not found.</returns>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyOrderedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Check if this contains both the key and value pair.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyOrderedDictionary`2.ContainsValue(`1)">
            <summary>
            Check if this contains the value
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyOrderedDictionary`2.IndexOf(`0)">
            <summary>
            Get the index of the given key
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyOrderedDictionary`2.TryGetKeyAtIndex(System.Int32)">
            <summary>
             Try to get the key at the given index.
             </summary>
             <returns>The key, or Default if not found.</returns>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyOrderedDictionary`2.TryGetKeyAtIndex(System.Int32,`0@)">
            <summary>
             Try to get the key at the given index.
             </summary>
             <param name="value">The found key, or default if not found.</param>
        </member>
        <member name="T:Meep.Tech.Collections.Generic.IReadOnlyDelegateCollection`1">
            <summary>
            A read only ordered collection of delegates
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyDelegateCollection`1.ReDelegate``1(System.Func{`0,``0})">
            <summary>
            Change all the delegates and return a new collection
            </summary>
        </member>
        <member name="T:Meep.Tech.Collections.Generic.KeyedSet`2">
            <summary>
            A Keyed collection that uses a lambda for key fetching.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.KeyedSet`2.#ctor(System.Func{`1,`0})">
            <summary>
            Make a keyed set that uses the function to fetch it's items.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.KeyedSet`2.#ctor(System.Func{`1,`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Make a keyed set that uses the function to fetch it's items.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.KeyedSet`2.GetKeyForItem(`1)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Meep.Tech.Collections.Generic.IReadOnlyMap`2">
            <summary>
            A read only map.
            </summary>
            <typeparam name="TForwardKey"></typeparam>
            <typeparam name="TReverseKey"></typeparam>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.IReadOnlyMap`2.Forward">
            <summary>
            The forward key value set
            </summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.IReadOnlyMap`2.Reverse">
            <summary>
            The reversed key value set
            </summary>
        </member>
        <member name="T:Meep.Tech.Collections.Generic.ReadOnlyMapExtensions">
            <summary>
            Extensions for read only maps.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.ReadOnlyMapExtensions.TryToGetAny``1(Meep.Tech.Collections.Generic.IReadOnlyMap{``0,``0},``0)">
            <summary>
            Try to get the map pair with either item having the given key.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.ReadOnlyMapExtensions.TryToGetAny``1(Meep.Tech.Collections.Generic.IReadOnlyMap{``0,``0},``0,System.Nullable{System.ValueTuple{``0,``0}}@)">
            <summary>
            Try to get the map pair with either item having the given key.
            </summary>
        </member>
        <member name="T:Meep.Tech.Collections.Generic.Map`2">
            <summary>
            A better, home made version of the 2 way map.
            </summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.Map`2.Forward">
            <summary>
            The forward key value set
            </summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.Map`2.Reverse">
            <summary>
            The reversed key value set
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.Map`2.Add(`0,`1)">
            <summary>
            Add a pair of keys.
            This throws if there is already a key in either collection with the given values.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.Map`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Add a pair of keys.
            This throws if there is already a key in either collection with the given values.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.Map`2.Add(System.ValueTuple{`0,`1})">
            <summary>
            Add a pair of keys.
            This throws if there is already a key in either collection with the given values.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.Map`2.Update(`0,`1)">
            <summary>
            Update both links to point to eachother, removing any current links for the values.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.Map`2.Update(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Update both links to point to eachother, removing any current links for the values.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.Map`2.Update(System.ValueTuple{`0,`1})">
            <summary>
            Update both links to point to eachother, removing any current links for the values.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.Map`2.Remove(`0)">
            <summary>
            Try to remove an entry using the forward key
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.Map`2.RemoveWithReverseKey(`1)">
            <summary>
            Try to remove an entry using the forward key
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.Map`2.Count">
            <summary>
            The number of entries
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.Map`2.GetEnumerator">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Meep.Tech.Collections.Generic.OrderedDictionary`2">
            <summary>
            An ordered dictionary.
            </summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.OrderedDictionary`2.Keys">
            <summary><inheritdoc/></summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.OrderedDictionary`2.Values">
            <summary><inheritdoc/></summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.OrderedDictionary`2.Count">
            <summary><inheritdoc/></summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.OrderedDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys">
            <summary><inheritdoc/></summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.OrderedDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values">
            <summary><inheritdoc/></summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.OrderedDictionary`2.IsReadOnly">
            <summary>
            If this has been marked readonly
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Make an ordered dictionary.
            </summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.OrderedDictionary`2.Item(`0)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.OrderedDictionary`2.Item(System.Int32)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.ContainsKey(`0)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#ContainsKey(`0)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.ContainsValue(`1)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.IndexOf(`0)">
            <summary>
            Gets the index of the key specified.
            </summary>
            <returns>Returns the index of the key specified if found. -1 if the key could not be located.</returns>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.GetValueAtIndex(System.Int32)">
            <summary>
            Get the key at the given index
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"/>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.GetKeyAtIndex(System.Int32)">
            <summary>
            Get the key at the given index
            </summary>
            <exception cref="T:System.IndexOutOfRangeException"/>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.GetValueWithKey(`0)">
            <summary>
            Get the value with the given key
            </summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"/>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.GetPairAtIndex(System.Int32)">
            <summary>
            Get the key value pair at the given index.
            <exception cref="T:System.IndexOutOfRangeException"/>
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.TryGetValue(`0,`1@)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.TryGetValue(`0)">
            <summary>
             Try to get the value with the given key.
             Default if not found.
             </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.TryGetValueAtIndex(System.Int32,`1@)">
            <summary>
             Try to get the value at the given index.
             Default if not found.
             </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.TryGetValueAtIndex(System.Int32)">
            <summary>
             Try to get the value at the given index.
             Default if not found.
             </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.TryGetKeyAtIndex(System.Int32)">
            <summary>
             Try to get the key at the given index.
             Default if not found.
             </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.TryGetKeyAtIndex(System.Int32,`0@)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.TryToGetPairAtIndex(System.Int32)">
            <summary>
            Get the key value pair at the given index.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.TryToGetPairAtIndex(System.Int32,System.Collections.Generic.KeyValuePair{`0,`1}@)">
            <summary>
            Get the key value pair at the given index.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.AsReadOnly">
            <summary>
            Get as readonly
            </summary>
            <returns></returns>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.Add(`0,`1)">
            <summary><inheritdoc/></summary>
             <exception cref="T:System.AccessViolationException"/>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.SetByIndex(System.Int32,`1)">
            <summary><inheritdoc/></summary>
             <exception cref="T:System.AccessViolationException"/>
             <exception cref="T:System.IndexOutOfRangeException"/>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.SetByKey(`0,`1)">
            <summary><inheritdoc/></summary>
             <exception cref="T:System.AccessViolationException"/>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.InsertByIndex(System.Int32,`0,`1)">
            <summary><inheritdoc/></summary>
             <exception cref="T:System.AccessViolationException"/>
             <exception cref="T:System.IndexOutOfRangeException"/>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.RemoveAt(System.Int32)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.Remove(`0)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.RemoveByKey(`0)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.Clear">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.GetEnumerator">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.OrderedDictionary`2.op_Implicit(Meep.Tech.Collections.Generic.OrderedDictionary{`0,`1})~System.Collections.Generic.Dictionary{`0,`1}">
            <summary>
            Auto conver this to a regular dictionary
            </summary>
        </member>
        <member name="T:Meep.Tech.Collections.Generic.IKeyedStackable">
            <summary>
            Can be used to make a stackable who's stack has an unique key
            </summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.IKeyedStackable.StackKey">
            <summary>
            Gets a key to index this stackable's stack with when this is the value.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IKeyedStackable.Meep#Tech#Collections#Generic#IStackable#CanStackWith(Meep.Tech.Collections.Generic.IStackable)">
            <summary>
            By default, keyed stackableso only stack with IKeyedStackable items with the same key.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.KeyedStackableExtensions.ToStacks``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Get a set of stackable items as stacks.
            </summary>
        </member>
        <member name="T:Meep.Tech.Collections.Generic.IStackable">
            <summary>
            A type/item that can be placed in a stack of similar items within a StackedCollection.
            </summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.IStackable.MaxQuantityPerStack">
            <summary>
            The max value allowed of this item in a single stack.
            null is infinite.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IStackable.CanStackWith(Meep.Tech.Collections.Generic.IStackable)">
            <summary>
            Used to determine if this item can stack with another item.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.StackableExtensions.ToKeyedStacks``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Get a set of stackable items as stacks.
            </summary>
        </member>
        <member name="T:Meep.Tech.Collections.Generic.IStackedCollection`1">
            <summary>
            A collection of stacked items.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IStackedCollection`1.Contains(`0)">
            <summary>
            Check if the collection contains a stack of the item.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IStackedCollection`1.Remove(`0,System.Int32,System.Int32@)">
            <summary>
            Remove the given number of the given item from this collection.
            </summary>
            <param name="remainder">any quantity not able to be removed.</param>
        </member>
        <member name="T:Meep.Tech.Collections.Generic.StackedCollection`1">
            <summary>
            A list of indexed stacks.
            </summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.StackedCollection`1.Count">
            <summary><inheritdoc/></summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.StackedCollection`1.IsReadOnly">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.StackedCollection`1.#ctor">
            <summary>
            Make a new stacked collection.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.StackedCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Make a new stacked collection.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.StackedCollection`1.#ctor(System.Collections.Generic.IEnumerable{System.Nullable{Meep.Tech.Collections.Generic.ValueStack{`0}}})">
            <summary>
            Make a new stacked collection.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.StackedCollection`1.Add(`0,System.Int32)">
            <summary>
            Adds the items from the provided stack to the current collection
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.StackedCollection`1.Add(System.Nullable{Meep.Tech.Collections.Generic.ValueStack{`0}})">
            <summary>
            Adds the items from the provided stack to the current collection
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.StackedCollection`1._add(System.Nullable{Meep.Tech.Collections.Generic.ValueStack{`0}})">
            <summary>
            Adds the items from the provided stack to the current collection
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.StackedCollection`1.Remove(`0,System.Int32,System.Int32@)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.StackedCollection`1.Clear">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.StackedCollection`1.Contains(`0)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.StackedCollection`1.CopyTo(System.Nullable{Meep.Tech.Collections.Generic.ValueStack{`0}}[],System.Int32)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.StackedCollection`1.GetEnumerator">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Meep.Tech.Collections.Generic.StackedInventory`1">
            <summary>
            A collection of stacked values that can be quickly retrieved by key.
            There can be multiple stacks per key, but only one stack per numerical index.
            </summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.StackedInventory`1.Item(System.String)">
            <summary>
            Get all the stacks with the matching key
            </summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.StackedInventory`1.Item(System.Int32)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.StackedInventory`1.#ctor">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.StackedInventory`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.StackedInventory`1.#ctor(System.Collections.Generic.IEnumerable{System.Nullable{Meep.Tech.Collections.Generic.ValueStack{`0}}})">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.StackedInventory`1.IndexesOf(System.String)">
            <summary>
            Get the indexes/indecies of stacks with the given stack key.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.StackedInventory`1.Add(`0,System.Int32)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.StackedInventory`1.Add(System.Nullable{Meep.Tech.Collections.Generic.ValueStack{`0}})">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.StackedInventory`1.Remove(`0,System.Int32,System.Int32@)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Meep.Tech.Collections.Generic.StackedList`1">
            <summary>
            A list of indexed stacks.
            </summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.StackedList`1.Values">
            <summary>
            All the values within the stacks, splayed out and ordered by the stack they were in
            </summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.StackedList`1.Item(System.Int32)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.StackedList`1.#ctor">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.StackedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.StackedList`1.#ctor(System.Collections.Generic.IEnumerable{System.Nullable{Meep.Tech.Collections.Generic.ValueStack{`0}}})">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.StackedList`1.IndexesOf(`0)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.StackedList`1.System#Collections#Generic#IList{Meep#Tech#Collections#Generic#ValueStack{TValue}?}#IndexOf(System.Nullable{Meep.Tech.Collections.Generic.ValueStack{`0}})">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.StackedList`1.FirstIndexOf(System.Nullable{Meep.Tech.Collections.Generic.ValueStack{`0}})">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.StackedList`1.Insert(System.Int32,System.Nullable{Meep.Tech.Collections.Generic.ValueStack{`0}})">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.StackedList`1.RemoveAt(System.Int32)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Meep.Tech.Collections.Generic.ValueStack`1">
            <summary>
            A stack of values
            </summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.ValueStack`1.Count">
            <summary>
            The number of copies of the valie in the stack
            </summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.ValueStack`1.Value">
            <summary>
            The value of all items in the stack.
            </summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.ValueStack`1.IsFull">
            <summary>
            If this stack is full
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.ValueStack`1.#ctor(`0,System.Int32)">
            <summary>
            Make a new stack of values.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.ValueStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Make a new stack of values. 
            If there's anything unique among these values, the unique attributes will be destroyed and replaced with the attributes of the first item in the collection!
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.ValueStack`1.Add(System.Int32,System.Int32@)">
            <summary>
            Add the count to the stack. This takes into account IStackable.MaxQuantityPerStack
            </summary>
            <param name="count">How many items to add</param>
            <param name="remainder">The count of items that couldn't be added</param>
            <returns>true if all values were added, false if some couldn't be added</returns>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.ValueStack`1.Remove(System.Int32,System.Int32@)">
            <summary>
            Remove the count from the stack.
            </summary>
            <param name="count">How many items to remove</param>
            <param name="remainder">The count of items that couldn't be removed (because none were left to remove)</param>
            <returns>true if all values were removed, false if some not be</returns>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.ValueStack`1.Add(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            Add the values to the stack. This takes into account IStackable.MaxQuantityPerStack
            If there's anything unique among these values, the unique attributes will be destroyed and replaced with the attributes of the first item in the existing stack!
            </summary>
            <param name="values">The values to add</param>
            <param name="remainder">The count of items that couldn't be added</param>
            <returns>true if all values were added, some if count not be</returns>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.ValueStack`1.GetEnumerator">
            <summary><inheritdoc/></summary> 
        </member>
        <member name="M:Meep.Tech.Collections.Generic.ValueStack`1.Clear">
            <summary>
            Clear this stack of items.
            </summary>
        </member>
        <member name="T:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2">
            <summary>
            A tagged collection that can only be read, not modified.
            </summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.Item(`0)">
            <summary>
            Fetch a set of values by tag.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.TryToGetAnyValuesFor(`0,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            Fetch a set of values by tag.
            </summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.Item(`1)">
            <summary>
            Fetch all the tags for a given value
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.TryToGetAnyTagsFor(`1,System.Collections.Generic.IEnumerable{`0}@)">
            <summary>
            Fetch a set of values by tag.
            </summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.Tags">
            <summary>
            All distinct tags
            </summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.Values">
            <summary>
            All distinct values
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.FindBestMatches(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Find the values that match the most tags in order
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.FindBestMatches(`0[])">
            <summary>
            Find the values that match the most tags in order
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.FindExactMatches(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Find the values that match ALL of the given tags in any order
            </summary>
            <param name="allowValuesToHaveOtherNonMatchingTags">If false, values cannot have any extra tags besides ones in the provided list. If this is true, they can have un-provided tags as well, but must also have all of the provided tags</param>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.FindWeightedMatches(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,System.Int32}})">
            <summary>
            Find matches given tags with specified weights
            The higher the weight, the more wanted the tag
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.FindWeightedMatches(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Find the best matches, taking into account tag order
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.FindWeightedMatches(System.Int32,`0[])">
            <summary>
            Find the best matches, taking into account tag order
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.FindWeightedMatches(System.ValueTuple{`0,System.Int32}[])">
            <summary>
            Find matches given tags with specified weights
            The higher the weight, the more wanted the tag
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.FindWeightedMatches(`0[])">
            <summary>
            Find the best matches, taking into account tag order
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.FirstWithTagsOrDefault(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Find the first value with the tags, or a default one with the best match
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.FirstWithTagsOrDefault(`0[])">
            <summary>
            Find the first value with the tags, or a default one with the best match
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.GetAllSortedByBestMatch(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Find the values that match the most tags
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.GetAllSortedByBestMatch(`0[])">
            <summary>
            Find the values that match the most tags
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.GetAllSortedByWeight(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,System.Int32}})">
            <summary>
            Find matches given tags with specified weights
            The higher the weight, the more wanted the tag
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.GetAllSortedByWeight(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Find the best matches, taking into account tag order
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.GetAllSortedByWeight(System.Collections.Generic.IList{`0},System.Int32)">
            <summary>
            Find the best matches, taking into account tag order
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.GetAllSortedByWeight(System.Int32,`0[])">
            <summary>
            Find the best matches, taking into account tag order
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.GetAllSortedByWeight(System.ValueTuple{`0,System.Int32}[])">
            <summary>
            Find matches given tags with specified weights
            The higher the weight, the more wanted the tag
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.GetAllSortedByWeight(`0[])">
            <summary>
            Find the best matches, taking into account tag order
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.SelectBestMatches(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Select the values that match the most tags in order into a new collection
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.SelectBestMatches(`0[])">
            <summary>
            Select the values that match the most tags in order into a new TagedCollection
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.SelectMatches(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Select the values that match any of the tags, unordered, into a new TagedCollection
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.SelectMatches(`0[])">
            <summary>
            Select the values that match any of the tags, unordered, into a new TagedCollection
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.SelectExactMatches(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary>
            Select the values that match ALL of the tags, unordered, into a new TagedCollection
            </summary> 
            <param name="allowValuesToHaveOtherNonMatchingTags">If false, values cannot have any extra tags besides ones in the provided list. If this is true, they can have un-provided tags as well, but must also have all of the provided tags</param>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.SelectWeightedMatches(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,System.Int32}})">
            <summary>
            Select matches given tags with specified weights into a new TagedCollection
            The higher the weight, the more wanted the tag
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.SelectWeightedMatches(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Select the best matches, taking into account tag order into a new TagedCollection
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.SelectWeightedMatches(System.Int32,`0[])">
            <summary>
            Select the best matches, taking into account tag order into a new TagedCollection
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.SelectWeightedMatches(System.ValueTuple{`0,System.Int32}[])">
            <summary>
            Select matches given tags with specified weights into a new TagedCollection
            The higher the weight, the more wanted the tag
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.IReadOnlyTagedCollection`2.SelectWeightedMatches(`0[])">
            <summary>
            Select the best matches, taking into account tag order into a new TagedCollection
            </summary>
        </member>
        <member name="T:Meep.Tech.Collections.Generic.ITagedCollection`2">
            <summary>
            A read/Write tagged colleciton.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.ITagedCollection`2.Add(System.Collections.Generic.IEnumerable{`0},`1)">
            <summary>
            Add a new value with as many tags as you want
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.ITagedCollection`2.Add(`1,`0[])">
            <summary>
            Add a new value with as many tags as you want
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.ITagedCollection`2.Remove(`1)">
            <summary>
            Remove a value
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.ITagedCollection`2.RemoveTagsForItem(`1,`0[])">
            <summary>
            Remove all of the tag connections to the given value.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.ITagedCollection`2.RemoveTagsForItem(System.Collections.Generic.IEnumerable{`0},`1)">
            <summary>
            Remove all of the tag connections to the given value.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.ITagedCollection`2.RemoveValuesFor(`0)">
            <summary>
            Remove all values for the given tag
            </summary>
        </member>
        <member name="T:Meep.Tech.Collections.Generic.TagedCollection`2">
            <summary>
            A collection of Values indexed by multiple non-unique tags
            </summary>
            <typeparam name="TTag">The tags to be used as multi-keys. Assumed to have a unique hash code</typeparam>
            <typeparam name="TValue">The stored values. Values should also have a unique hash code</typeparam>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.TagedCollection`2.Values">
            <summary><inheritdoc/></summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.TagedCollection`2.Tags">
            <summary><inheritdoc/></summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.TagedCollection`2.Item(`0)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="P:Meep.Tech.Collections.Generic.TagedCollection`2.Item(`1)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.Add(`1,`0[])">
            <summary>
            Add a new value with as many tags as you want
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.Add(System.Collections.Generic.IEnumerable{`0},`1)">
            <summary>
            Add a new value with multiple tags
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.Remove(`1)">
            <summary>
            Remove a value
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.RemoveValuesFor(`0)">
            <summary>
            Remove all values for the given tag
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.RemoveTagsForItem(`1,`0[])">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.RemoveTagsForItem(System.Collections.Generic.IEnumerable{`0},`1)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.FindWeightedMatches(System.Int32,`0[])">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.FindWeightedMatches(`0[])">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.FindWeightedMatches(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.FindWeightedMatches(System.ValueTuple{`0,System.Int32}[])">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.FindWeightedMatches(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,System.Int32}})">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.FindBestMatches(`0[])">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.FindBestMatches(System.Collections.Generic.IEnumerable{`0})">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.FindExactMatches(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.SelectMatches(`0[])">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.SelectMatches(System.Collections.Generic.IEnumerable{`0})">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.FirstWithTagsOrDefault(`0[])">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.FirstWithTagsOrDefault(System.Collections.Generic.IEnumerable{`0})">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.SelectWeightedMatches(System.Int32,`0[])">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.SelectWeightedMatches(`0[])">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.SelectWeightedMatches(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.SelectWeightedMatches(System.ValueTuple{`0,System.Int32}[])">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.SelectWeightedMatches(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,System.Int32}})">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.SelectBestMatches(`0[])">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.SelectBestMatches(System.Collections.Generic.IEnumerable{`0})">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.SelectExactMatches(System.Collections.Generic.IEnumerable{`0},System.Boolean)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.GetAllSortedByWeight(System.Int32,`0[])">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.GetAllSortedByWeight(`0[])">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.GetAllSortedByWeight(System.Collections.Generic.IEnumerable{`0})">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.GetAllSortedByWeight(System.Collections.Generic.IList{`0},System.Int32)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.GetAllSortedByWeight(System.ValueTuple{`0,System.Int32}[])">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.GetAllSortedByWeight(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,System.Int32}})">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.GetAllSortedByBestMatch(`0[])">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.GetAllSortedByBestMatch(System.Collections.Generic.IEnumerable{`0})">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.GetEnumerator">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Meep.Tech.Collections.Generic.TagedCollection`2.WithValidations">
            <summary>
            A tagged collection with optional validatiosn before adding or removing items.
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.WithValidations.#ctor(System.Func{System.Collections.Generic.IEnumerable{`0},`1,System.Boolean},System.Func{System.Collections.Generic.IEnumerable{`0},`1,System.Boolean},System.Func{`1,System.Boolean})">
            <summary>
            Make a new tagged collection with validations
            </summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.WithValidations.Add(System.Collections.Generic.IEnumerable{`0},`1)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.WithValidations.Remove(`1)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.WithValidations.RemoveTagsForItem(System.Collections.Generic.IEnumerable{`0},`1)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Collections.Generic.TagedCollection`2.WithValidations.RemoveValuesFor(`0)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Meep.Tech.Messaging.IBroadcaster">
            <summary>
            Can be used to send/recive events
            </summary>
        </member>
        <member name="M:Meep.Tech.Messaging.IBroadcaster.Announce(Meep.Tech.Messaging.IEvent,System.Collections.Generic.HashSet{Meep.Tech.Messaging.Event.Tag})">
            <summary>
            Send the event announcement to all applicable observers subscribed to this broadcaster, taking into account the event's tags.
            </summary>
        </member>
        <member name="M:Meep.Tech.Messaging.IBroadcaster.Subscribe(Meep.Tech.Messaging.IObserver,System.Collections.Generic.IEnumerable{Meep.Tech.Messaging.Event.Tag})">
            <summary>
            Subscribe the given observer to the given tags/channels
            </summary>
        </member>
        <member name="M:Meep.Tech.Messaging.IBroadcaster.UnSubscribe(Meep.Tech.Messaging.IObserver,System.Collections.Generic.IEnumerable{Meep.Tech.Messaging.Event.Tag})">
            <summary>
            UnSubscribe the given observer from the given tags/channels
            </summary>
        </member>
        <member name="T:Meep.Tech.Messaging.Broadcaster">
            <summary>
            Can be used to send/recive events
            </summary>
        </member>
        <member name="M:Meep.Tech.Messaging.Broadcaster.Announce(Meep.Tech.Messaging.IEvent,System.Collections.Generic.HashSet{Meep.Tech.Messaging.Event.Tag})">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Messaging.Broadcaster.Subscribe(Meep.Tech.Messaging.IObserver,System.Collections.Generic.IEnumerable{Meep.Tech.Messaging.Event.Tag})">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Messaging.Broadcaster.UnSubscribe(Meep.Tech.Messaging.IObserver,System.Collections.Generic.IEnumerable{Meep.Tech.Messaging.Event.Tag})">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Meep.Tech.Messaging.BroadcasterExtensions">
            <summary>
            Helper extensions for broadcasting events.
            </summary>
        </member>
        <member name="M:Meep.Tech.Messaging.BroadcasterExtensions.SetUpBroadcaster(Meep.Tech.Data.Universe,Meep.Tech.Messaging.IBroadcaster)">
            <summary>
            Set up a default broadcaster/messenger for this universe.
            </summary>
            <param name="broadcaster">(optional) provide your own broadcaster. If this isnt provided, a default one is made.</param>
        </member>
        <member name="M:Meep.Tech.Messaging.BroadcasterExtensions.GetBroadcaster(Meep.Tech.Data.Universe)">
            <summary>
            Get the broadcaster attached to this universe, if there is one.
            </summary>
            <param name="universe"></param>
            <returns></returns>
        </member>
        <member name="M:Meep.Tech.Messaging.BroadcasterExtensions.Broadcast(Meep.Tech.Data.Universe,Meep.Tech.Messaging.IEvent,System.Collections.Generic.HashSet{Meep.Tech.Messaging.Event.Tag})">
            <summary>
            Send the event announcement to all applicable observers subscribed to the messenger/broadcaster attached to this universe.
            </summary>
        </member>
        <member name="M:Meep.Tech.Messaging.BroadcasterExtensions.Broadcast``1(``0,Meep.Tech.Messaging.IEvent,System.Collections.Generic.HashSet{Meep.Tech.Messaging.Event.Tag})">
            <summary>
            Send the event announcement to all applicable observers subscribed to the messenger/broadcaster attached to this observer's universe.
            </summary>
        </member>
        <member name="M:Meep.Tech.Messaging.BroadcasterExtensions.SubscribeTo``1(``0,System.Collections.Generic.HashSet{Meep.Tech.Messaging.Event.Tag})">
            <summary>
            Unsubscribe this observer to the given tags.
            </summary>
        </member>
        <member name="M:Meep.Tech.Messaging.BroadcasterExtensions.UnSubscribeFrom``1(``0,System.Collections.Generic.HashSet{Meep.Tech.Messaging.Event.Tag})">
            <summary>
            Unsubscribe this observer from the given tags.
            </summary>
        </member>
        <member name="T:Meep.Tech.Messaging.IEvent">
            <summary>
            Base interface for all events
            </summary>
        </member>
        <member name="P:Meep.Tech.Messaging.IEvent.Name">
            <summary>
            The name of the event.
            </summary>
        </member>
        <member name="P:Meep.Tech.Messaging.IEvent.Tags">
            <summary>
            The tags for this event.
            </summary>
        </member>
        <member name="T:Meep.Tech.Messaging.Event">
            <summary>
            Base class for object based events.
            </summary>
        </member>
        <member name="P:Meep.Tech.Messaging.Event.Name">
            <summary>
            Overrideable event name.
            </summary>
        </member>
        <member name="P:Meep.Tech.Messaging.Event.Tags">
            <summary>
            The tags for this event. This determins who will be notified.
            </summary>
        </member>
        <member name="T:Meep.Tech.Messaging.Event.Tag">
            <summary>
            A tag for a nevent. Tags work like channels that can be listened into by observers.
            </summary>
        </member>
        <member name="M:Meep.Tech.Messaging.Event.Tag.#ctor(System.String,Meep.Tech.Data.Universe)">
            <summary>
            Make a new tag.
            </summary>
        </member>
        <member name="M:Meep.Tech.Messaging.Event.Tag.WithExtraContext(System.String[])">
            <summary>
            Make a version of this tag with some required extra context.
            Can be used to make specific events like 'level-up|[CHARACTERID]' vs just 'level-up'
            </summary>
        </member>
        <member name="T:Meep.Tech.Messaging.IObserver">
            <summary>
            An object capable of observing, and reacting to, events.
            </summary>
        </member>
        <member name="M:Meep.Tech.Messaging.IObserver.Observe(Meep.Tech.Messaging.IEvent)">
            <summary>
            How this observer reacts when it observes an event.
            </summary>
        </member>
        <member name="T:Meep.Tech.Messaging.Messenger">
            <summary>
            Context for a broadcaster built into the universe.
            </summary>
        </member>
        <member name="M:Meep.Tech.Messaging.Messenger.Announce(Meep.Tech.Messaging.IEvent,System.Collections.Generic.HashSet{Meep.Tech.Messaging.Event.Tag})">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Messaging.Messenger.Subscribe(Meep.Tech.Messaging.IObserver,System.Collections.Generic.IEnumerable{Meep.Tech.Messaging.Event.Tag})">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Meep.Tech.Messaging.Messenger.UnSubscribe(Meep.Tech.Messaging.IObserver,System.Collections.Generic.IEnumerable{Meep.Tech.Messaging.Event.Tag})">
            <summary><inheritdoc/></summary>
        </member>
        <member name="T:Meep.Tech.Noise.FastNoise">
            <summary>
            Get noise values between -1.0 and 1.0
            </summary>
        </member>
        <member name="T:Meep.Tech.Noise.RNG">
            <summary>
            Simple Global Random Value Generation.
            Mostly used for seedless random number generation.
            Should not be used for cryptography or multi-threading/specific seed based generation.
            </summary>
        </member>
        <member name="P:Meep.Tech.Noise.RNG.GenerateNextGuid">
            <summary>
            Overrideable uniqe id function
            </summary>
        </member>
        <member name="P:Meep.Tech.Noise.RNG.NextGuid">
            <summary>
            Get the next globally unique string id.
            </summary>
        </member>
        <member name="M:Meep.Tech.Noise.RNG.GenerateRandomessSeed">
            <summary>
            Used to get the seed for the static randoness function.
            </summary>
        </member>
        <member name="P:Meep.Tech.Noise.RNG.Static">
            <summary>
            Default static randomness generator
            </summary>
        </member>
        <member name="M:Meep.Tech.Noise.RNG.GenerateRandomNewWord(System.Nullable{System.Int32},System.Random)">
            <summary>
            Generate a sort of normal random new word.
            </summary>
        </member>
        <member name="M:Meep.Tech.Noise.RNG.NextPercent(System.Random)">
            <summary>
            Get the next random int value between and including 0 and 100
            </summary>
        </member>
        <member name="T:Nodepad.Server.JsonArrayOrSingleObject`1">
            <summary>
            A simple and easy auto converter class to help get a list of items from what could be a single object or list of the given object in json.
            </summary>
        </member>
        <member name="T:Nodepad.Server.JsonArrayOrSingleObject`1.Converter">
            <summary>
            Json converter for ListOrSingleJsonObject
            </summary>
        </member>
        <member name="M:Nodepad.Server.JsonArrayOrSingleObject`1.Converter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,Nodepad.Server.JsonArrayOrSingleObject{`0},System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary><inheritdoc/></summary>
        </member>
        <member name="M:Nodepad.Server.JsonArrayOrSingleObject`1.Converter.WriteJson(Newtonsoft.Json.JsonWriter,Nodepad.Server.JsonArrayOrSingleObject{`0},Newtonsoft.Json.JsonSerializer)">
            <summary><inheritdoc/></summary>
        </member>
    </members>
</doc>
